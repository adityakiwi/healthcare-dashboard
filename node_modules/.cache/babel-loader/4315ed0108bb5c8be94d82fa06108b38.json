{"ast":null,"code":"var _jsxFileName = \"/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/AreaChart.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend';\nlet svg_count = 0;\n\nclass AreaChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.removeExistingBars = this.removeExistingBars.bind(this);\n    this.createBarChart = this.createBarChart.bind(this);\n    this.state = {\n      svg: null,\n      width: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    const owidth = this.props.size[0];\n    const oheight = this.props.size[1];\n    var margin = {\n      top: 20,\n      right: 20,\n      bottom: 70,\n      left: 100\n    },\n        width = owidth - margin.left - margin.right,\n        height = oheight - margin.top - margin.bottom;\n    const svg = d3.select(\"body\").select(\"#lc\").select(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    this.setState({\n      svg,\n      width,\n      height\n    });\n  }\n\n  componentDidUpdate() {\n    this.removeExistingBars();\n    this.createBarChart();\n  }\n\n  midpoint(range) {\n    return range[0] + (range[1] - range[0]) / 2.0;\n  }\n\n  removeExistingBars() {\n    const {\n      svg\n    } = this.state;\n    svg.selectAll(\"*\").remove();\n  }\n\n  createBarChart() {\n    const {\n      svg\n    } = this.state;\n    const {\n      width\n    } = this.state;\n    const {\n      height\n    } = this.state;\n    const output = this.props.data;\n    let data = output.filter(function (e) {\n      return e.id < 299;\n    });\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n    var keys = [\"CHEST PAIN\", \"PNEUMONIA\", \"SEPSIS\", \"TRAUMA\"];\n    var stackedData = d3.stack().keys(keys)(data);\n    console.log(\"originalData\", data);\n    console.log(\"pancake\", stackedData); // let series = d3.stack().keys(keys)(data)\n    // console.log(\"series\",series)\n    // var xScale = d3.scaleLinear()\n    //     .range([0, width]); // output\n    // // 6. Y scale will use the randomly generate number \n    // var yScale = d3.scaleLinear()\n    //     // .domain([0, 1]) // input \n    //     .range([height, 0]); // output \n\n    var xScale = d3.scaleLinear().domain(d3.extent(data, function (d) {\n      return d.id;\n    })).range([0, width]); // Add Y axis\n\n    var yScale = d3.scaleLinear().domain([0, 250]).range([height, 0]); //  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n    // yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\n\n    let xAxis = svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xScale));\n    let yAxis = svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yScale));\n    let area = d3.area().x(function (d) {\n      return xScale(d.data.id);\n    }).y0(function (d) {\n      return yScale(d[0]);\n    }).y1(function (d) {\n      return yScale(d[1]);\n    }).curve(d3.curveMonotoneX); // apply smoothing to the line\n    //////////\n    // BRUSHING AND CHART //\n    //////////\n    // Add a clipPath: everything out of this area won't be drawn.\n\n    var clip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Add brushing\n    // var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n    //     .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n    //     .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n    // Create the scatter variable: where both the circles and the brush take place\n\n    var areaChart = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Show the areas\n\n    areaChart.selectAll(\"mylayers\").data(stackedData).enter().append(\"path\").attr(\"class\", function (d) {\n      return \"myArea \" + d.key;\n    }).style(\"fill\", function (d) {\n      return color(d.key);\n    }).attr(\"d\", area); // Add the brushing\n    // areaChart\n    //     .append(\"g\")\n    //     .attr(\"class\", \"brush\")\n    //     .call(brush);\n    // var idleTimeout\n    // function idled() { idleTimeout = null; }\n    // // A function that update the chart for given boundaries\n    // function updateChart(d, event) {\n    //     let extent = event.selection\n    //     // If no selection, back to initial coordinate. Otherwise, update X axis domain\n    //     if (!extent) {\n    //         if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n    //         xScale.domain(d3.extent(data, function (d) { return d.year; }))\n    //     } else {\n    //         xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])])\n    //         areaChart.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n    //     }\n    //     // Update axis and area position\n    //     xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5))\n    //     areaChart\n    //         .selectAll(\"path\")\n    //         .transition().duration(1000)\n    //         .attr(\"d\", area)\n    // }\n    //////////\n    // HIGHLIGHT GROUP //\n    //////////\n    // What to do when one group is hovered\n    // var highlight = function (d) {\n    //     console.log(d)\n    //     // reduce opacity of all groups\n    //     d3.selectAll(\".myArea\").style(\"opacity\", .1)\n    //     // expect the one that is hovered\n    //     d3.select(\".\" + d).style(\"opacity\", 1)\n    // }\n    // // And when it is not hovered anymore\n    // var noHighlight = function (d) {\n    //     d3.selectAll(\".myArea\").style(\"opacity\", 1)\n    // }\n    // //////////\n    // // LEGEND //\n    // //////////\n    // // Add one dot in the legend for each name.\n    // var size = 20\n    // svg.selectAll(\"myrect\")\n    //     .data(keys)\n    //     .enter()\n    //     .append(\"rect\")\n    //     .attr(\"x\", 400)\n    //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) }) // 100 is where the first dot appears. 25 is the distance between dots\n    //     .attr(\"width\", size)\n    //     .attr(\"height\", size)\n    //     .style(\"fill\", function (d) { return color(d) })\n    //     .on(\"mouseover\", highlight)\n    //     .on(\"mouseleave\", noHighlight)\n    // // Add one dot in the legend for each name.\n    // svg.selectAll(\"mylabels\")\n    //     .data(keys)\n    //     .enter()\n    //     .append(\"text\")\n    //     .attr(\"x\", 400 + size * 1.2)\n    //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) + (size / 2) }) // 100 is where the first dot appears. 25 is the distance between dots\n    //     .style(\"fill\", function (d) { return color(d) })\n    //     .text(function (d) { return d })\n    //     .attr(\"text-anchor\", \"left\")\n    //     .style(\"alignment-baseline\", \"middle\")\n    //     .on(\"mouseover\", highlight)\n    //     .on(\"mouseleave\", noHighlight)\n\n    var legend = d3l.legendColor().scale(color).shape('circle').orient('vertical');\n    svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", \"translate(\" + (width - 350) + \", \" + 20 + \")\");\n    svg.select(\".legend\").call(legend);\n    const xmid = xScale.range()[0] + (xScale.range()[1] - xScale.range()[0]) / 2.0;\n    const ymid = yScale.range()[0] + (yScale.range()[1] - yScale.range()[0]) / 2.0;\n    const xtitle = svg.append('text').attr('class', 'axis-title').text(\"Age\");\n    xtitle.attr('text-anchor', 'middle');\n    xtitle.attr('x', xmid);\n    xtitle.attr('y', height + 40);\n    const ytitle = svg.append('text').attr('class', 'axis-title').text('Distribution');\n    ytitle.attr('x', -240);\n    ytitle.attr('y', -80);\n    ytitle.attr('dy', '1.75ex');\n    ytitle.attr('text-anchor', 'middle');\n    ytitle.attr('transform', 'rotate(-90)'); // const tooltip = d3\n    //     .select('#container')\n    //     .append('div')\n    //     .attr('class', 'tooltip')\n    //     .style('opacity', 0);\n    // function mouseover() {\n    //     d3.select(this).attr(\"opacity\", .5)\n    // }\n    // function mouseout() {\n    //     d3.select(this).attr(\"opacity\", 1);\n    // }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default AreaChart;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/AreaChart.js"],"names":["React","d3","d3l","svg_count","AreaChart","Component","constructor","props","removeExistingBars","bind","createBarChart","state","svg","width","height","componentDidMount","owidth","size","oheight","margin","top","right","bottom","left","select","attr","append","setState","componentDidUpdate","midpoint","range","selectAll","remove","output","data","filter","e","id","color","scaleOrdinal","schemeCategory10","keys","stackedData","stack","console","log","xScale","scaleLinear","domain","extent","d","yScale","xAxis","call","axisBottom","yAxis","axisLeft","area","x","y0","y1","curve","curveMonotoneX","clip","areaChart","enter","key","style","legend","legendColor","scale","shape","orient","xmid","ymid","xtitle","text","ytitle","render","myRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend'\n\nlet svg_count = 0;\n\nclass AreaChart extends React.Component {\n    constructor(props) {\n        super(props)\n        this.removeExistingBars = this.removeExistingBars.bind(this);\n        this.createBarChart = this.createBarChart.bind(this)\n        this.state = {\n            svg: null,\n            width: 0,\n            height: 0\n        };\n\n    }\n    componentDidMount() {\n        const owidth = this.props.size[0]\n        const oheight = this.props.size[1]\n\n        var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n            width = owidth - margin.left - margin.right,\n            height = oheight - margin.top - margin.bottom;\n\n        const svg = d3.select(\"body\").select(\"#lc\").select(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        this.setState({ svg, width, height });\n    }\n    componentDidUpdate() {\n        this.removeExistingBars();\n        this.createBarChart();\n    }\n\n    midpoint(range) {\n        return range[0] + (range[1] - range[0]) / 2.0;\n    }\n\n    removeExistingBars() {\n        const { svg } = this.state;\n\n        svg.selectAll(\"*\").remove();\n\n    }\n\n    createBarChart() {\n        const { svg } = this.state;\n        const { width } = this.state;\n        const { height } = this.state;\n\n        const output = this.props.data\n\n\n        let data = output.filter(function (e) {\n            return e.id < 299;\n        });\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var keys = [\"CHEST PAIN\", \"PNEUMONIA\", \"SEPSIS\", \"TRAUMA\"]\n\n        var stackedData = d3.stack()\n            .keys(keys)\n            (data)\n\n        console.log(\"originalData\", data)\n        console.log(\"pancake\", stackedData)\n\n\n        // let series = d3.stack().keys(keys)(data)\n        // console.log(\"series\",series)\n\n        // var xScale = d3.scaleLinear()\n        //     .range([0, width]); // output\n\n        // // 6. Y scale will use the randomly generate number \n        // var yScale = d3.scaleLinear()\n        //     // .domain([0, 1]) // input \n        //     .range([height, 0]); // output \n\n        var xScale = d3.scaleLinear()\n            .domain(d3.extent(data, function (d) { return d.id; }))\n            .range([0, width]);\n\n\n\n        // Add Y axis\n        var yScale = d3.scaleLinear()\n            .domain([0, 250])\n            .range([height, 0]);\n        //  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n        // yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\n\n\n        let xAxis = svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(xScale));\n\n        let yAxis = svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(d3.axisLeft(yScale));\n\n\n        let area = d3.area()\n            .x(function (d) { return xScale(d.data.id); })\n            .y0(function (d) { return yScale(d[0]); })\n            .y1(function (d) { return yScale(d[1]); })\n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        //////////\n        // BRUSHING AND CHART //\n        //////////\n\n        // Add a clipPath: everything out of this area won't be drawn.\n        var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"svg:rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"x\", 0)\n            .attr(\"y\", 0);\n\n        // Add brushing\n        // var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n        //     .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        //     .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n\n        // Create the scatter variable: where both the circles and the brush take place\n        var areaChart = svg.append('g')\n            .attr(\"clip-path\", \"url(#clip)\")\n\n        // Show the areas\n        areaChart\n            .selectAll(\"mylayers\")\n            .data(stackedData)\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", function (d) { return \"myArea \" + d.key })\n            .style(\"fill\", function (d) { return color(d.key); })\n            .attr(\"d\", area)\n\n        // Add the brushing\n        // areaChart\n        //     .append(\"g\")\n        //     .attr(\"class\", \"brush\")\n        //     .call(brush);\n\n        // var idleTimeout\n        // function idled() { idleTimeout = null; }\n\n        // // A function that update the chart for given boundaries\n        // function updateChart(d, event) {\n\n        //     let extent = event.selection\n\n        //     // If no selection, back to initial coordinate. Otherwise, update X axis domain\n        //     if (!extent) {\n        //         if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        //         xScale.domain(d3.extent(data, function (d) { return d.year; }))\n        //     } else {\n        //         xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])])\n        //         areaChart.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n        //     }\n\n        //     // Update axis and area position\n        //     xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5))\n        //     areaChart\n        //         .selectAll(\"path\")\n        //         .transition().duration(1000)\n        //         .attr(\"d\", area)\n        // }\n\n\n\n        //////////\n        // HIGHLIGHT GROUP //\n        //////////\n\n        // What to do when one group is hovered\n        // var highlight = function (d) {\n        //     console.log(d)\n        //     // reduce opacity of all groups\n        //     d3.selectAll(\".myArea\").style(\"opacity\", .1)\n        //     // expect the one that is hovered\n        //     d3.select(\".\" + d).style(\"opacity\", 1)\n        // }\n\n        // // And when it is not hovered anymore\n        // var noHighlight = function (d) {\n        //     d3.selectAll(\".myArea\").style(\"opacity\", 1)\n        // }\n\n\n\n        // //////////\n        // // LEGEND //\n        // //////////\n\n        // // Add one dot in the legend for each name.\n        // var size = 20\n        // svg.selectAll(\"myrect\")\n        //     .data(keys)\n        //     .enter()\n        //     .append(\"rect\")\n        //     .attr(\"x\", 400)\n        //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) }) // 100 is where the first dot appears. 25 is the distance between dots\n        //     .attr(\"width\", size)\n        //     .attr(\"height\", size)\n        //     .style(\"fill\", function (d) { return color(d) })\n        //     .on(\"mouseover\", highlight)\n        //     .on(\"mouseleave\", noHighlight)\n\n        // // Add one dot in the legend for each name.\n        // svg.selectAll(\"mylabels\")\n        //     .data(keys)\n        //     .enter()\n        //     .append(\"text\")\n        //     .attr(\"x\", 400 + size * 1.2)\n        //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) + (size / 2) }) // 100 is where the first dot appears. 25 is the distance between dots\n        //     .style(\"fill\", function (d) { return color(d) })\n        //     .text(function (d) { return d })\n        //     .attr(\"text-anchor\", \"left\")\n        //     .style(\"alignment-baseline\", \"middle\")\n        //     .on(\"mouseover\", highlight)\n        //     .on(\"mouseleave\", noHighlight)\n\n        var legend = d3l.legendColor()\n            .scale(color)\n            .shape('circle')\n            .orient('vertical')\n\n\n        svg.append(\"g\")\n            .attr(\"class\", \"legend\")\n            .attr(\"transform\", \"translate(\" + (width - 350) + \", \" + 20 + \")\");\n\n\n        svg.select(\".legend\")\n            .call(legend);\n\n\n        const xmid = xScale.range()[0] + (xScale.range()[1] - xScale.range()[0]) / 2.0;\n        const ymid = yScale.range()[0] + (yScale.range()[1] - yScale.range()[0]) / 2.0;\n        const xtitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text(\"Age\");\n        xtitle.attr('text-anchor', 'middle');\n        xtitle.attr('x', xmid);\n        xtitle.attr('y', height + 40);\n        const ytitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text('Distribution')\n        ytitle.attr('x', -240);\n        ytitle.attr('y', -80);\n        ytitle.attr('dy', '1.75ex');\n        ytitle.attr('text-anchor', 'middle');\n        ytitle.attr('transform', 'rotate(-90)');\n\n        // const tooltip = d3\n        //     .select('#container')\n        //     .append('div')\n        //     .attr('class', 'tooltip')\n        //     .style('opacity', 0);\n\n        // function mouseover() {\n        //     d3.select(this).attr(\"opacity\", .5)\n\n        // }\n\n        // function mouseout() {\n        //     d3.select(this).attr(\"opacity\", 1);\n        // }\n\n    }\n\n\n\n    render() {\n        return (\n            <div ref={this.myRef} />\n        )\n    }\n\n}\n\nexport default AreaChart;\n"]},"metadata":{},"sourceType":"module"}