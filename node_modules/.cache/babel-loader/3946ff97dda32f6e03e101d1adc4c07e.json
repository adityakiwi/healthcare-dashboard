{"ast":null,"code":"var _jsxFileName = \"/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/AreaChart.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend';\nimport { event as currentEvent } from 'd3-selection';\nlet svg_count = 0;\n\nclass AreaChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.removeExistingBars = this.removeExistingBars.bind(this);\n    this.createBarChart = this.createBarChart.bind(this);\n    this.state = {\n      svg: null,\n      legend: null,\n      width: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    const owidth = this.props.size[0];\n    const oheight = this.props.size[1];\n    var margin = {\n      top: 20,\n      right: 20,\n      bottom: 70,\n      left: 100\n    },\n        width = owidth - margin.left - margin.right,\n        height = oheight - margin.top - margin.bottom;\n    const svg = d3.select(\"body\").select(\"#ac\").select(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    const legend = d3.select(\"body\").select(\"#ac\").append(\"svg\");\n    this.setState({\n      svg,\n      width,\n      height,\n      legend\n    });\n  }\n\n  componentDidUpdate() {\n    this.removeExistingBars();\n    this.createBarChart();\n  }\n\n  midpoint(range) {\n    return range[0] + (range[1] - range[0]) / 2.0;\n  }\n\n  removeExistingBars() {\n    const {\n      svg\n    } = this.state;\n    svg.selectAll(\"*\").remove();\n  }\n\n  createBarChart() {\n    const {\n      svg\n    } = this.state;\n    const {\n      width\n    } = this.state;\n    const {\n      height\n    } = this.state;\n    const {\n      legend\n    } = this.state;\n    const output = this.props.data;\n    let data = output.filter(function (e) {\n      return e.id < 299;\n    });\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n    var keys = this.props.keys;\n    console.log(keys);\n    var stackedData = d3.stack().keys(keys)(data);\n    console.log(\"originalData\", data);\n    console.log(\"pancake\", stackedData); // let series = d3.stack().keys(keys)(data)\n    // console.log(\"series\",series)\n    // var xScale = d3.scaleLinear()\n    //     .range([0, width]); // output\n    // // 6. Y scale will use the randomly generate number \n    // var yScale = d3.scaleLinear()\n    //     // .domain([0, 1]) // input \n    //     .range([height, 0]); // output \n\n    var xScale = d3.scaleLinear() // .domain(d3.extent(data, function (d) { return d.id; }))\n    .domain([0, 90]).range([0, width]); // Add Y axis\n\n    var yScale = d3.scaleLinear().domain([0, 500]).range([height, 0]); //  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n    // yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\n\n    let xAxis = svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xScale));\n    let yAxis = svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yScale));\n    let area = d3.area().x(function (d) {\n      return xScale(d.data.id);\n    }).y0(function (d) {\n      return yScale(d[0]);\n    }).y1(function (d) {\n      return yScale(d[1]);\n    }).curve(d3.curveMonotoneX); // apply smoothing to the line\n    // Create the scatter variable: where both the circles and the brush take place\n\n    var areaChart = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Show the areas\n\n    areaChart.selectAll(\"mylayers\").data(stackedData).enter().append(\"path\").attr(\"class\", function (d) {\n      return \"myArea \" + d.key;\n    }).style(\"fill\", function (d) {\n      return color(d.key);\n    }).attr(\"d\", area).on(\"mouseover\", highlight).on(\"mouseleave\", noHighlight);\n    var brush = d3.brushX() // Add the brush feature using the d3.brush function\n    .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n    .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n\n    areaChart.append(\"g\").attr(\"class\", \"brush\").call(brush);\n    var idleTimeout;\n\n    function idled() {\n      idleTimeout = null;\n    } // A function that update the chart for given boundaries\n\n\n    function updateChart(event, d) {\n      let extent = event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n      if (!extent) {\n        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n        xScale.domain(d3.extent(data, function (d) {\n          return d.year;\n        }));\n      } else {\n        xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])]);\n        areaChart.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n      } // Update axis and area position\n\n\n      xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5));\n      areaChart.selectAll(\"path\").transition().duration(1000).attr(\"d\", area);\n    }\n\n    var highlight = function (d) {\n      console.log(d); // reduce opacity of all groups\n\n      d3.selectAll(\".myArea\").style(\"opacity\", .1); // expect the one that is hovered\n\n      d3.select(\".\" + d).style(\"opacity\", 1);\n    }; // And when it is not hovered anymore\n\n\n    var noHighlight = function (d) {\n      d3.selectAll(\".myArea\").style(\"opacity\", 1);\n    };\n\n    var legend_f = d3l.legendColor().scale(color).shape('circle').orient('vertical').labelOffset(5);\n    legend.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", \"translate(\" + (width - 130) + \", \" + 20 + \")\").style(\"font-size\", \"12\");\n    svg.select(\".legend\").call(legend_f);\n    const xmid = xScale.range()[0] + (xScale.range()[1] - xScale.range()[0]) / 2.0;\n    const ymid = yScale.range()[0] + (yScale.range()[1] - yScale.range()[0]) / 2.0;\n    const xtitle = svg.append('text').attr('class', 'axis-title').text(\"Age\");\n    xtitle.attr('text-anchor', 'middle');\n    xtitle.attr('x', xmid);\n    xtitle.attr('y', height + 40);\n    const ytitle = svg.append('text').attr('class', 'axis-title').text('Distribution');\n    ytitle.attr('x', -240);\n    ytitle.attr('y', -80);\n    ytitle.attr('dy', '1.75ex');\n    ytitle.attr('text-anchor', 'middle');\n    ytitle.attr('transform', 'rotate(-90)'); // const tooltip = d3\n    //     .select('#container')\n    //     .append('div')\n    //     .attr('class', 'tooltip')\n    //     .style('opacity', 0);\n    // function mouseover() {\n    //     d3.select(this).attr(\"opacity\", .5)\n    // }\n    // function mouseout() {\n    //     d3.select(this).attr(\"opacity\", 1);\n    // }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default AreaChart;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/AreaChart.js"],"names":["React","d3","d3l","event","currentEvent","svg_count","AreaChart","Component","constructor","props","removeExistingBars","bind","createBarChart","state","svg","legend","width","height","componentDidMount","owidth","size","oheight","margin","top","right","bottom","left","select","attr","append","setState","componentDidUpdate","midpoint","range","selectAll","remove","output","data","filter","e","id","color","scaleOrdinal","schemeCategory10","keys","console","log","stackedData","stack","xScale","scaleLinear","domain","yScale","xAxis","call","axisBottom","yAxis","axisLeft","area","x","d","y0","y1","curve","curveMonotoneX","areaChart","enter","key","style","on","highlight","noHighlight","brush","brushX","extent","updateChart","idleTimeout","idled","selection","setTimeout","year","invert","move","transition","duration","ticks","legend_f","legendColor","scale","shape","orient","labelOffset","xmid","ymid","xtitle","text","ytitle","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,eAArB;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,cAAtC;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,IADI;AAETC,MAAAA,MAAM,EAAC,IAFE;AAGTC,MAAAA,KAAK,EAAE,CAHE;AAITC,MAAAA,MAAM,EAAE;AAJC,KAAb;AAOH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAG,KAAKV,KAAL,CAAWW,IAAX,CAAgB,CAAhB,CAAf;AACA,UAAMC,OAAO,GAAG,KAAKZ,KAAL,CAAWW,IAAX,CAAgB,CAAhB,CAAhB;AAEA,QAAIE,MAAM,GAAG;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE,EAA9B;AAAkCC,MAAAA,IAAI,EAAE;AAAxC,KAAb;AAAA,QACIV,KAAK,GAAGG,MAAM,GAAGG,MAAM,CAACI,IAAhB,GAAuBJ,MAAM,CAACE,KAD1C;AAAA,QAEIP,MAAM,GAAGI,OAAO,GAAGC,MAAM,CAACC,GAAjB,GAAuBD,MAAM,CAACG,MAF3C;AAIA,UAAMX,GAAG,GAAGb,EAAE,CAAC0B,MAAH,CAAU,MAAV,EAAkBA,MAAlB,CAAyB,KAAzB,EAAgCA,MAAhC,CAAuC,KAAvC,EACPC,IADO,CACF,OADE,EACOZ,KAAK,GAAGM,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KADpC,EAEPI,IAFO,CAEF,QAFE,EAEQX,MAAM,GAAGK,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAFrC,EAGPI,MAHO,CAGA,GAHA,EAIPD,IAJO,CAIF,WAJE,EAIW,eAAeN,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAJ3D,CAAZ;AAMA,UAAMR,MAAM,GAAGd,EAAE,CAAC0B,MAAH,CAAU,MAAV,EAAkBA,MAAlB,CAAyB,KAAzB,EAAgCE,MAAhC,CAAuC,KAAvC,CAAf;AAEA,SAAKC,QAAL,CAAc;AAAEhB,MAAAA,GAAF;AAAOE,MAAAA,KAAP;AAAcC,MAAAA,MAAd;AAAqBF,MAAAA;AAArB,KAAd;AACH;;AACDgB,EAAAA,kBAAkB,GAAG;AACjB,SAAKrB,kBAAL;AACA,SAAKE,cAAL;AACH;;AAEDoB,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,WAAOA,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAjB,IAAwB,GAA1C;AACH;;AAEDvB,EAAAA,kBAAkB,GAAG;AACjB,UAAM;AAAEI,MAAAA;AAAF,QAAU,KAAKD,KAArB;AAEAC,IAAAA,GAAG,CAACoB,SAAJ,CAAc,GAAd,EAAmBC,MAAnB;AAEH;;AAEDvB,EAAAA,cAAc,GAAG;AACb,UAAM;AAAEE,MAAAA;AAAF,QAAU,KAAKD,KAArB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAY,KAAKH,KAAvB;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAa,KAAKJ,KAAxB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAa,KAAKF,KAAxB;AAEA,UAAMuB,MAAM,GAAG,KAAK3B,KAAL,CAAW4B,IAA1B;AAGA,QAAIA,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAc,UAAUC,CAAV,EAAa;AAClC,aAAOA,CAAC,CAACC,EAAF,GAAO,GAAd;AACH,KAFU,CAAX;AAIA,QAAIC,KAAK,GAAGxC,EAAE,CAACyC,YAAH,CAAgBzC,EAAE,CAAC0C,gBAAnB,CAAZ;AAEA,QAAIC,IAAI,GAAG,KAAKnC,KAAL,CAAWmC,IAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAIG,WAAW,GAAG9C,EAAE,CAAC+C,KAAH,GACbJ,IADa,CACRA,IADQ,EAEbP,IAFa,CAAlB;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BT,IAA5B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,WAAvB,EAtBa,CAyBb;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,QAAIE,MAAM,GAAGhD,EAAE,CAACiD,WAAH,GACT;AADS,KAERC,MAFQ,CAED,CAAC,CAAD,EAAI,EAAJ,CAFC,EAGRlB,KAHQ,CAGF,CAAC,CAAD,EAAIjB,KAAJ,CAHE,CAAb,CApCa,CA2Cb;;AACA,QAAIoC,MAAM,GAAGnD,EAAE,CAACiD,WAAH,GACRC,MADQ,CACD,CAAC,CAAD,EAAI,GAAJ,CADC,EAERlB,KAFQ,CAEF,CAAChB,MAAD,EAAS,CAAT,CAFE,CAAb,CA5Ca,CA+Cb;AACA;;AAGA,QAAIoC,KAAK,GAAGvC,GAAG,CAACe,MAAJ,CAAW,GAAX,EACPD,IADO,CACF,OADE,EACO,QADP,EAEPA,IAFO,CAEF,WAFE,EAEW,iBAAiBX,MAAjB,GAA0B,GAFrC,EAGPqC,IAHO,CAGFrD,EAAE,CAACsD,UAAH,CAAcN,MAAd,CAHE,CAAZ;AAKA,QAAIO,KAAK,GAAG1C,GAAG,CAACe,MAAJ,CAAW,GAAX,EACPD,IADO,CACF,OADE,EACO,QADP,EAEP0B,IAFO,CAEFrD,EAAE,CAACwD,QAAH,CAAYL,MAAZ,CAFE,CAAZ;AAKA,QAAIM,IAAI,GAAGzD,EAAE,CAACyD,IAAH,GACNC,CADM,CACJ,UAAUC,CAAV,EAAa;AAAE,aAAOX,MAAM,CAACW,CAAC,CAACvB,IAAF,CAAOG,EAAR,CAAb;AAA2B,KADtC,EAENqB,EAFM,CAEH,UAAUD,CAAV,EAAa;AAAE,aAAOR,MAAM,CAACQ,CAAC,CAAC,CAAD,CAAF,CAAb;AAAsB,KAFlC,EAGNE,EAHM,CAGH,UAAUF,CAAV,EAAa;AAAE,aAAOR,MAAM,CAACQ,CAAC,CAAC,CAAD,CAAF,CAAb;AAAsB,KAHlC,EAING,KAJM,CAIA9D,EAAE,CAAC+D,cAJH,CAAX,CA7Da,CAiEiB;AAI9B;;AACA,QAAIC,SAAS,GAAGnD,GAAG,CAACe,MAAJ,CAAW,GAAX,EACXD,IADW,CACN,WADM,EACO,YADP,CAAhB,CAtEa,CAyEb;;AACAqC,IAAAA,SAAS,CACJ/B,SADL,CACe,UADf,EAEKG,IAFL,CAEUU,WAFV,EAGKmB,KAHL,GAIKrC,MAJL,CAIY,MAJZ,EAKKD,IALL,CAKU,OALV,EAKmB,UAAUgC,CAAV,EAAa;AAAE,aAAO,YAAYA,CAAC,CAACO,GAArB;AAA0B,KAL5D,EAMKC,KANL,CAMW,MANX,EAMmB,UAAUR,CAAV,EAAa;AAAE,aAAOnB,KAAK,CAACmB,CAAC,CAACO,GAAH,CAAZ;AAAsB,KANxD,EAOKvC,IAPL,CAOU,GAPV,EAOe8B,IAPf,EAQKW,EARL,CAQQ,WARR,EAQqBC,SARrB,EASKD,EATL,CASQ,YATR,EASsBE,WATtB;AAYI,QAAIC,KAAK,GAAGvE,EAAE,CAACwE,MAAH,GAA4B;AAA5B,KACXC,MADW,CACJ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC1D,KAAD,EAAQC,MAAR,CAAT,CADI,EACuB;AADvB,KAEXoD,EAFW,CAER,KAFQ,EAEDM,WAFC,CAAZ,CAtFS,CAwFe;;AAE5BV,IAAAA,SAAS,CACJpC,MADL,CACY,GADZ,EAEKD,IAFL,CAEU,OAFV,EAEmB,OAFnB,EAGK0B,IAHL,CAGUkB,KAHV;AAKA,QAAII,WAAJ;;AACA,aAASC,KAAT,GAAiB;AAAED,MAAAA,WAAW,GAAG,IAAd;AAAqB,KAhG3B,CAkGb;;;AACA,aAASD,WAAT,CAAqBxE,KAArB,EAA4ByD,CAA5B,EAA+B;AAE3B,UAAIc,MAAM,GAAGvE,KAAK,CAAC2E,SAAnB,CAF2B,CAI3B;;AACA,UAAI,CAACJ,MAAL,EAAa;AACT,YAAI,CAACE,WAAL,EAAkB,OAAOA,WAAW,GAAGG,UAAU,CAACF,KAAD,EAAQ,GAAR,CAA/B,CADT,CACsD;;AAC/D5B,QAAAA,MAAM,CAACE,MAAP,CAAclD,EAAE,CAACyE,MAAH,CAAUrC,IAAV,EAAgB,UAAUuB,CAAV,EAAa;AAAE,iBAAOA,CAAC,CAACoB,IAAT;AAAgB,SAA/C,CAAd;AACH,OAHD,MAGO;AACH/B,QAAAA,MAAM,CAACE,MAAP,CAAc,CAACF,MAAM,CAACgC,MAAP,CAAcP,MAAM,CAAC,CAAD,CAApB,CAAD,EAA2BzB,MAAM,CAACgC,MAAP,CAAcP,MAAM,CAAC,CAAD,CAApB,CAA3B,CAAd;AACAT,QAAAA,SAAS,CAACtC,MAAV,CAAiB,QAAjB,EAA2B2B,IAA3B,CAAgCkB,KAAK,CAACU,IAAtC,EAA4C,IAA5C,EAFG,CAE+C;AACrD,OAX0B,CAa3B;;;AACA7B,MAAAA,KAAK,CAAC8B,UAAN,GAAmBC,QAAnB,CAA4B,IAA5B,EAAkC9B,IAAlC,CAAuCrD,EAAE,CAACsD,UAAH,CAAcN,MAAd,EAAsBoC,KAAtB,CAA4B,CAA5B,CAAvC;AACApB,MAAAA,SAAS,CACJ/B,SADL,CACe,MADf,EAEKiD,UAFL,GAEkBC,QAFlB,CAE2B,IAF3B,EAGKxD,IAHL,CAGU,GAHV,EAGe8B,IAHf;AAIH;;AAKD,QAAIY,SAAS,GAAG,UAAUV,CAAV,EAAa;AACzBf,MAAAA,OAAO,CAACC,GAAR,CAAYc,CAAZ,EADyB,CAEzB;;AACA3D,MAAAA,EAAE,CAACiC,SAAH,CAAa,SAAb,EAAwBkC,KAAxB,CAA8B,SAA9B,EAAyC,EAAzC,EAHyB,CAIzB;;AACAnE,MAAAA,EAAE,CAAC0B,MAAH,CAAU,MAAMiC,CAAhB,EAAmBQ,KAAnB,CAAyB,SAAzB,EAAoC,CAApC;AACH,KAND,CA3Ha,CAmIb;;;AACA,QAAIG,WAAW,GAAG,UAAUX,CAAV,EAAa;AAC3B3D,MAAAA,EAAE,CAACiC,SAAH,CAAa,SAAb,EAAwBkC,KAAxB,CAA8B,SAA9B,EAAyC,CAAzC;AACH,KAFD;;AAMA,QAAIkB,QAAQ,GAAGpF,GAAG,CAACqF,WAAJ,GACVC,KADU,CACJ/C,KADI,EAEVgD,KAFU,CAEJ,QAFI,EAGVC,MAHU,CAGH,UAHG,EAIVC,WAJU,CAIE,CAJF,CAAf;AAOA5E,IAAAA,MAAM,CAACc,MAAP,CAAc,GAAd,EACKD,IADL,CACU,OADV,EACmB,QADnB,EAEKA,IAFL,CAEU,WAFV,EAEuB,gBAAgBZ,KAAK,GAAG,GAAxB,IAA+B,IAA/B,GAAsC,EAAtC,GAA2C,GAFlE,EAGKoD,KAHL,CAGW,WAHX,EAGwB,IAHxB;AAKAtD,IAAAA,GAAG,CAACa,MAAJ,CAAW,SAAX,EACK2B,IADL,CACUgC,QADV;AAIA,UAAMM,IAAI,GAAG3C,MAAM,CAAChB,KAAP,GAAe,CAAf,IAAoB,CAACgB,MAAM,CAAChB,KAAP,GAAe,CAAf,IAAoBgB,MAAM,CAAChB,KAAP,GAAe,CAAf,CAArB,IAA0C,GAA3E;AACA,UAAM4D,IAAI,GAAGzC,MAAM,CAACnB,KAAP,GAAe,CAAf,IAAoB,CAACmB,MAAM,CAACnB,KAAP,GAAe,CAAf,IAAoBmB,MAAM,CAACnB,KAAP,GAAe,CAAf,CAArB,IAA0C,GAA3E;AACA,UAAM6D,MAAM,GAAGhF,GAAG,CAACe,MAAJ,CAAW,MAAX,EACVD,IADU,CACL,OADK,EACI,YADJ,EAEVmE,IAFU,CAEL,KAFK,CAAf;AAGAD,IAAAA,MAAM,CAAClE,IAAP,CAAY,aAAZ,EAA2B,QAA3B;AACAkE,IAAAA,MAAM,CAAClE,IAAP,CAAY,GAAZ,EAAiBgE,IAAjB;AACAE,IAAAA,MAAM,CAAClE,IAAP,CAAY,GAAZ,EAAiBX,MAAM,GAAG,EAA1B;AACA,UAAM+E,MAAM,GAAGlF,GAAG,CAACe,MAAJ,CAAW,MAAX,EACVD,IADU,CACL,OADK,EACI,YADJ,EAEVmE,IAFU,CAEL,cAFK,CAAf;AAGAC,IAAAA,MAAM,CAACpE,IAAP,CAAY,GAAZ,EAAiB,CAAC,GAAlB;AACAoE,IAAAA,MAAM,CAACpE,IAAP,CAAY,GAAZ,EAAiB,CAAC,EAAlB;AACAoE,IAAAA,MAAM,CAACpE,IAAP,CAAY,IAAZ,EAAkB,QAAlB;AACAoE,IAAAA,MAAM,CAACpE,IAAP,CAAY,aAAZ,EAA2B,QAA3B;AACAoE,IAAAA,MAAM,CAACpE,IAAP,CAAY,WAAZ,EAAyB,aAAzB,EAzKa,CA2Kb;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEH;;AAIDqE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAjPmC;;AAqPxC,eAAe3F,SAAf","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend'\nimport { event as currentEvent } from 'd3-selection';\n\nlet svg_count = 0;\n\nclass AreaChart extends React.Component {\n    constructor(props) {\n        super(props)\n        this.removeExistingBars = this.removeExistingBars.bind(this);\n        this.createBarChart = this.createBarChart.bind(this)\n        this.state = {\n            svg: null,\n            legend:null,\n            width: 0,\n            height: 0\n        };\n\n    }\n    componentDidMount() {\n        const owidth = this.props.size[0]\n        const oheight = this.props.size[1]\n\n        var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n            width = owidth - margin.left - margin.right,\n            height = oheight - margin.top - margin.bottom;\n\n        const svg = d3.select(\"body\").select(\"#ac\").select(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        const legend = d3.select(\"body\").select(\"#ac\").append(\"svg\")\n\n        this.setState({ svg, width, height,legend });\n    }\n    componentDidUpdate() {\n        this.removeExistingBars();\n        this.createBarChart();\n    }\n\n    midpoint(range) {\n        return range[0] + (range[1] - range[0]) / 2.0;\n    }\n\n    removeExistingBars() {\n        const { svg } = this.state;\n\n        svg.selectAll(\"*\").remove();\n\n    }\n\n    createBarChart() {\n        const { svg } = this.state;\n        const { width } = this.state;\n        const { height } = this.state;\n        const { legend } = this.state;\n\n        const output = this.props.data\n\n\n        let data = output.filter(function (e) {\n            return e.id < 299;\n        });\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var keys = this.props.keys\n        console.log(keys)\n        var stackedData = d3.stack()\n            .keys(keys)\n            (data)\n\n        console.log(\"originalData\", data)\n        console.log(\"pancake\", stackedData)\n\n\n        // let series = d3.stack().keys(keys)(data)\n        // console.log(\"series\",series)\n\n        // var xScale = d3.scaleLinear()\n        //     .range([0, width]); // output\n\n        // // 6. Y scale will use the randomly generate number \n        // var yScale = d3.scaleLinear()\n        //     // .domain([0, 1]) // input \n        //     .range([height, 0]); // output \n\n        var xScale = d3.scaleLinear()\n            // .domain(d3.extent(data, function (d) { return d.id; }))\n            .domain([0, 90])\n            .range([0, width]);\n\n\n\n        // Add Y axis\n        var yScale = d3.scaleLinear()\n            .domain([0, 500])\n            .range([height, 0]);\n        //  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n        // yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\n\n\n        let xAxis = svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(xScale));\n\n        let yAxis = svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(d3.axisLeft(yScale));\n\n\n        let area = d3.area()\n            .x(function (d) { return xScale(d.data.id); })\n            .y0(function (d) { return yScale(d[0]); })\n            .y1(function (d) { return yScale(d[1]); })\n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n\n\n        // Create the scatter variable: where both the circles and the brush take place\n        var areaChart = svg.append('g')\n            .attr(\"clip-path\", \"url(#clip)\")\n\n        // Show the areas\n        areaChart\n            .selectAll(\"mylayers\")\n            .data(stackedData)\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", function (d) { return \"myArea \" + d.key })\n            .style(\"fill\", function (d) { return color(d.key); })\n            .attr(\"d\", area)\n            .on(\"mouseover\", highlight)\n            .on(\"mouseleave\", noHighlight)\n\n\n            var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n            .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n            .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n\n        areaChart\n            .append(\"g\")\n            .attr(\"class\", \"brush\")\n            .call(brush);\n\n        var idleTimeout\n        function idled() { idleTimeout = null; }\n\n        // A function that update the chart for given boundaries\n        function updateChart(event, d) {\n\n            let extent = event.selection\n\n            // If no selection, back to initial coordinate. Otherwise, update X axis domain\n            if (!extent) {\n                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n                xScale.domain(d3.extent(data, function (d) { return d.year; }))\n            } else {\n                xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])])\n                areaChart.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n            }\n\n            // Update axis and area position\n            xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5))\n            areaChart\n                .selectAll(\"path\")\n                .transition().duration(1000)\n                .attr(\"d\", area)\n        }\n\n\n\n    \n        var highlight = function (d) {\n            console.log(d)\n            // reduce opacity of all groups\n            d3.selectAll(\".myArea\").style(\"opacity\", .1)\n            // expect the one that is hovered\n            d3.select(\".\" + d).style(\"opacity\", 1)\n        }\n\n        // And when it is not hovered anymore\n        var noHighlight = function (d) {\n            d3.selectAll(\".myArea\").style(\"opacity\", 1)\n        }\n\n\n\n        var legend_f = d3l.legendColor()\n            .scale(color)\n            .shape('circle')\n            .orient('vertical')\n            .labelOffset(5)\n\n\n        legend.append(\"g\")\n            .attr(\"class\", \"legend\")\n            .attr(\"transform\", \"translate(\" + (width - 130) + \", \" + 20 + \")\")\n            .style(\"font-size\", \"12\")\n\n        svg.select(\".legend\")\n            .call(legend_f);\n\n\n        const xmid = xScale.range()[0] + (xScale.range()[1] - xScale.range()[0]) / 2.0;\n        const ymid = yScale.range()[0] + (yScale.range()[1] - yScale.range()[0]) / 2.0;\n        const xtitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text(\"Age\");\n        xtitle.attr('text-anchor', 'middle');\n        xtitle.attr('x', xmid);\n        xtitle.attr('y', height + 40);\n        const ytitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text('Distribution')\n        ytitle.attr('x', -240);\n        ytitle.attr('y', -80);\n        ytitle.attr('dy', '1.75ex');\n        ytitle.attr('text-anchor', 'middle');\n        ytitle.attr('transform', 'rotate(-90)');\n\n        // const tooltip = d3\n        //     .select('#container')\n        //     .append('div')\n        //     .attr('class', 'tooltip')\n        //     .style('opacity', 0);\n\n        // function mouseover() {\n        //     d3.select(this).attr(\"opacity\", .5)\n\n        // }\n\n        // function mouseout() {\n        //     d3.select(this).attr(\"opacity\", 1);\n        // }\n\n    }\n\n\n\n    render() {\n        return (\n            <svg />\n        )\n    }\n\n}\n\nexport default AreaChart;\n"]},"metadata":{},"sourceType":"module"}