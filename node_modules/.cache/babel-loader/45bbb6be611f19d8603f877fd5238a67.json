{"ast":null,"code":"import _classCallCheck from\"/Users/aditya/Dropbox/Senior S1/ST/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/aditya/Dropbox/Senior S1/ST/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/aditya/Dropbox/Senior S1/ST/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/aditya/Dropbox/Senior S1/ST/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/aditya/Dropbox/Senior S1/ST/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import*as d3 from'd3';import*as d3l from'd3-svg-legend';var svg_count=0;var AreaChart=/*#__PURE__*/function(_React$Component){_inherits(AreaChart,_React$Component);var _super=_createSuper(AreaChart);function AreaChart(props){var _this;_classCallCheck(this,AreaChart);_this=_super.call(this,props);_this.removeExistingBars=_this.removeExistingBars.bind(_assertThisInitialized(_this));_this.createBarChart=_this.createBarChart.bind(_assertThisInitialized(_this));_this.state={svg:null,width:0,height:0};return _this;}_createClass(AreaChart,[{key:\"componentDidMount\",value:function componentDidMount(){var owidth=this.props.size[0];var oheight=this.props.size[1];var margin={top:20,right:20,bottom:70,left:100},width=owidth-margin.left-margin.right,height=oheight-margin.top-margin.bottom;var svg=d3.select(\"body\").select(\"#lc\").append(\"svg\").attr(\"width\",width+margin.left+margin.right).attr(\"height\",height+margin.top+margin.bottom).append(\"g\").attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\");this.setState({svg:svg,width:width,height:height});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.removeExistingBars();this.createBarChart();}},{key:\"midpoint\",value:function midpoint(range){return range[0]+(range[1]-range[0])/2.0;}},{key:\"removeExistingBars\",value:function removeExistingBars(){var svg=this.state.svg;svg.selectAll(\"*\").remove();}},{key:\"createBarChart\",value:function createBarChart(){var svg=this.state.svg;var width=this.state.width;var height=this.state.height;var output=this.props.data;var data=output.filter(function(e){return e.id<299;});var color=d3.scaleOrdinal(d3.schemeCategory10);var keys=[\"CHEST PAIN\",\"PNEUMONIA\",\"SEPSIS\",\"TRAUMA\"];var stackedData=d3.stack().keys(keys)(data);console.log(\"originalData\",data);console.log(\"pancake\",stackedData);// let series = d3.stack().keys(keys)(data)\n// console.log(\"series\",series)\n// var xScale = d3.scaleLinear()\n//     .range([0, width]); // output\n// // 6. Y scale will use the randomly generate number \n// var yScale = d3.scaleLinear()\n//     // .domain([0, 1]) // input \n//     .range([height, 0]); // output \nvar xScale=d3.scaleLinear().domain(d3.extent(data,function(d){return d.id;})).range([0,width]);// Add Y axis\nvar yScale=d3.scaleLinear().domain([0,250]).range([height,0]);//  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n// yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\nvar xAxis=svg.append(\"g\").attr(\"class\",\"x axis\").attr(\"transform\",\"translate(0,\"+height+\")\").call(d3.axisBottom(xScale));var yAxis=svg.append(\"g\").attr(\"class\",\"y axis\").call(d3.axisLeft(yScale));var area=d3.area().x(function(d){return xScale(d.data.id);}).y0(function(d){return yScale(d[0]);}).y1(function(d){return yScale(d[1]);}).curve(d3.curveMonotoneX);// apply smoothing to the line\n//////////\n// BRUSHING AND CHART //\n//////////\n// Add a clipPath: everything out of this area won't be drawn.\nvar clip=svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\",\"clip\").append(\"svg:rect\").attr(\"width\",width).attr(\"height\",height).attr(\"x\",0).attr(\"y\",0);// Add brushing\n// var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n//     .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n//     .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n// Create the scatter variable: where both the circles and the brush take place\nvar areaChart=svg.append('g').attr(\"clip-path\",\"url(#clip)\");// Show the areas\nareaChart.selectAll(\"mylayers\").data(stackedData).enter().append(\"path\").attr(\"class\",function(d){return\"myArea \"+d.key;}).style(\"fill\",function(d){return color(d.key);}).attr(\"d\",area);// Add the brushing\n// areaChart\n//     .append(\"g\")\n//     .attr(\"class\", \"brush\")\n//     .call(brush);\n// var idleTimeout\n// function idled() { idleTimeout = null; }\n// // A function that update the chart for given boundaries\n// function updateChart(d, event) {\n//     let extent = event.selection\n//     // If no selection, back to initial coordinate. Otherwise, update X axis domain\n//     if (!extent) {\n//         if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n//         xScale.domain(d3.extent(data, function (d) { return d.year; }))\n//     } else {\n//         xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])])\n//         areaChart.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n//     }\n//     // Update axis and area position\n//     xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5))\n//     areaChart\n//         .selectAll(\"path\")\n//         .transition().duration(1000)\n//         .attr(\"d\", area)\n// }\n//////////\n// HIGHLIGHT GROUP //\n//////////\n// What to do when one group is hovered\n// var highlight = function (d) {\n//     console.log(d)\n//     // reduce opacity of all groups\n//     d3.selectAll(\".myArea\").style(\"opacity\", .1)\n//     // expect the one that is hovered\n//     d3.select(\".\" + d).style(\"opacity\", 1)\n// }\n// // And when it is not hovered anymore\n// var noHighlight = function (d) {\n//     d3.selectAll(\".myArea\").style(\"opacity\", 1)\n// }\n// //////////\n// // LEGEND //\n// //////////\n// // Add one dot in the legend for each name.\n// var size = 20\n// svg.selectAll(\"myrect\")\n//     .data(keys)\n//     .enter()\n//     .append(\"rect\")\n//     .attr(\"x\", 400)\n//     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) }) // 100 is where the first dot appears. 25 is the distance between dots\n//     .attr(\"width\", size)\n//     .attr(\"height\", size)\n//     .style(\"fill\", function (d) { return color(d) })\n//     .on(\"mouseover\", highlight)\n//     .on(\"mouseleave\", noHighlight)\n// // Add one dot in the legend for each name.\n// svg.selectAll(\"mylabels\")\n//     .data(keys)\n//     .enter()\n//     .append(\"text\")\n//     .attr(\"x\", 400 + size * 1.2)\n//     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) + (size / 2) }) // 100 is where the first dot appears. 25 is the distance between dots\n//     .style(\"fill\", function (d) { return color(d) })\n//     .text(function (d) { return d })\n//     .attr(\"text-anchor\", \"left\")\n//     .style(\"alignment-baseline\", \"middle\")\n//     .on(\"mouseover\", highlight)\n//     .on(\"mouseleave\", noHighlight)\nvar legend=d3l.legendColor().scale(color).shape('circle').orient('vertical');svg.append(\"g\").attr(\"class\",\"legend\").attr(\"transform\",\"translate(\"+(width-350)+\", \"+20+\")\");svg.select(\".legend\").call(legend);var xmid=xScale.range()[0]+(xScale.range()[1]-xScale.range()[0])/2.0;var ymid=yScale.range()[0]+(yScale.range()[1]-yScale.range()[0])/2.0;var xtitle=svg.append('text').attr('class','axis-title').text(\"Age\");xtitle.attr('text-anchor','middle');xtitle.attr('x',xmid);xtitle.attr('y',height+40);var ytitle=svg.append('text').attr('class','axis-title').text('Distribution');ytitle.attr('x',-240);ytitle.attr('y',-80);ytitle.attr('dy','1.75ex');ytitle.attr('text-anchor','middle');ytitle.attr('transform','rotate(-90)');// const tooltip = d3\n//     .select('#container')\n//     .append('div')\n//     .attr('class', 'tooltip')\n//     .style('opacity', 0);\n// function mouseover() {\n//     d3.select(this).attr(\"opacity\", .5)\n// }\n// function mouseout() {\n//     d3.select(this).attr(\"opacity\", 1);\n// }\n}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{ref:this.myRef});}}]);return AreaChart;}(React.Component);export default AreaChart;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/AreaChart.js"],"names":["React","d3","d3l","svg_count","AreaChart","props","removeExistingBars","bind","createBarChart","state","svg","width","height","owidth","size","oheight","margin","top","right","bottom","left","select","append","attr","setState","range","selectAll","remove","output","data","filter","e","id","color","scaleOrdinal","schemeCategory10","keys","stackedData","stack","console","log","xScale","scaleLinear","domain","extent","d","yScale","xAxis","call","axisBottom","yAxis","axisLeft","area","x","y0","y1","curve","curveMonotoneX","clip","areaChart","enter","key","style","legend","legendColor","scale","shape","orient","xmid","ymid","xtitle","text","ytitle","myRef","Component"],"mappings":"+yBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,GAAKC,CAAAA,EAAZ,KAAoB,IAApB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,eAArB,CAEA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,C,GAEMC,CAAAA,S,kHACF,mBAAYC,KAAZ,CAAmB,2CACf,uBAAMA,KAAN,EACA,MAAKC,kBAAL,CAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,+BAA1B,CACA,MAAKC,cAAL,CAAsB,MAAKA,cAAL,CAAoBD,IAApB,+BAAtB,CACA,MAAKE,KAAL,CAAa,CACTC,GAAG,CAAE,IADI,CAETC,KAAK,CAAE,CAFE,CAGTC,MAAM,CAAE,CAHC,CAAb,CAJe,aAUlB,C,mFACmB,CAChB,GAAMC,CAAAA,MAAM,CAAG,KAAKR,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAf,CACA,GAAMC,CAAAA,OAAO,CAAG,KAAKV,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAhB,CAEA,GAAIE,CAAAA,MAAM,CAAG,CAAEC,GAAG,CAAE,EAAP,CAAWC,KAAK,CAAE,EAAlB,CAAsBC,MAAM,CAAE,EAA9B,CAAkCC,IAAI,CAAE,GAAxC,CAAb,CACIT,KAAK,CAAGE,MAAM,CAAGG,MAAM,CAACI,IAAhB,CAAuBJ,MAAM,CAACE,KAD1C,CAEIN,MAAM,CAAGG,OAAO,CAAGC,MAAM,CAACC,GAAjB,CAAuBD,MAAM,CAACG,MAF3C,CAIA,GAAMT,CAAAA,GAAG,CAAGT,EAAE,CAACoB,MAAH,CAAU,MAAV,EAAkBA,MAAlB,CAAyB,KAAzB,EAAgCC,MAAhC,CAAuC,KAAvC,EACPC,IADO,CACF,OADE,CACOZ,KAAK,CAAGK,MAAM,CAACI,IAAf,CAAsBJ,MAAM,CAACE,KADpC,EAEPK,IAFO,CAEF,QAFE,CAEQX,MAAM,CAAGI,MAAM,CAACC,GAAhB,CAAsBD,MAAM,CAACG,MAFrC,EAGPG,MAHO,CAGA,GAHA,EAIPC,IAJO,CAIF,WAJE,CAIW,aAAeP,MAAM,CAACI,IAAtB,CAA6B,GAA7B,CAAmCJ,MAAM,CAACC,GAA1C,CAAgD,GAJ3D,CAAZ,CAOA,KAAKO,QAAL,CAAc,CAAEd,GAAG,CAAHA,GAAF,CAAOC,KAAK,CAALA,KAAP,CAAcC,MAAM,CAANA,MAAd,CAAd,EACH,C,+DACoB,CACjB,KAAKN,kBAAL,GACA,KAAKE,cAAL,GACH,C,0CAEQiB,K,CAAO,CACZ,MAAOA,CAAAA,KAAK,CAAC,CAAD,CAAL,CAAW,CAACA,KAAK,CAAC,CAAD,CAAL,CAAWA,KAAK,CAAC,CAAD,CAAjB,EAAwB,GAA1C,CACH,C,+DAEoB,IACTf,CAAAA,GADS,CACD,KAAKD,KADJ,CACTC,GADS,CAGjBA,GAAG,CAACgB,SAAJ,CAAc,GAAd,EAAmBC,MAAnB,GAEH,C,uDAEgB,IACLjB,CAAAA,GADK,CACG,KAAKD,KADR,CACLC,GADK,IAELC,CAAAA,KAFK,CAEK,KAAKF,KAFV,CAELE,KAFK,IAGLC,CAAAA,MAHK,CAGM,KAAKH,KAHX,CAGLG,MAHK,CAKb,GAAMgB,CAAAA,MAAM,CAAG,KAAKvB,KAAL,CAAWwB,IAA1B,CAGA,GAAIA,CAAAA,IAAI,CAAGD,MAAM,CAACE,MAAP,CAAc,SAAUC,CAAV,CAAa,CAClC,MAAOA,CAAAA,CAAC,CAACC,EAAF,CAAO,GAAd,CACH,CAFU,CAAX,CAIA,GAAIC,CAAAA,KAAK,CAAGhC,EAAE,CAACiC,YAAH,CAAgBjC,EAAE,CAACkC,gBAAnB,CAAZ,CAEA,GAAIC,CAAAA,IAAI,CAAG,CAAC,YAAD,CAAe,WAAf,CAA4B,QAA5B,CAAsC,QAAtC,CAAX,CAEA,GAAIC,CAAAA,WAAW,CAAGpC,EAAE,CAACqC,KAAH,GACbF,IADa,CACRA,IADQ,EAEbP,IAFa,CAAlB,CAIAU,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BX,IAA5B,EACAU,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBH,WAAvB,EAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA,GAAII,CAAAA,MAAM,CAAGxC,EAAE,CAACyC,WAAH,GACRC,MADQ,CACD1C,EAAE,CAAC2C,MAAH,CAAUf,IAAV,CAAgB,SAAUgB,CAAV,CAAa,CAAE,MAAOA,CAAAA,CAAC,CAACb,EAAT,CAAc,CAA7C,CADC,EAERP,KAFQ,CAEF,CAAC,CAAD,CAAId,KAAJ,CAFE,CAAb,CAMA;AACA,GAAImC,CAAAA,MAAM,CAAG7C,EAAE,CAACyC,WAAH,GACRC,MADQ,CACD,CAAC,CAAD,CAAI,GAAJ,CADC,EAERlB,KAFQ,CAEF,CAACb,MAAD,CAAS,CAAT,CAFE,CAAb,CAGA;AACA;AAGA,GAAImC,CAAAA,KAAK,CAAGrC,GAAG,CAACY,MAAJ,CAAW,GAAX,EACPC,IADO,CACF,OADE,CACO,QADP,EAEPA,IAFO,CAEF,WAFE,CAEW,eAAiBX,MAAjB,CAA0B,GAFrC,EAGPoC,IAHO,CAGF/C,EAAE,CAACgD,UAAH,CAAcR,MAAd,CAHE,CAAZ,CAKA,GAAIS,CAAAA,KAAK,CAAGxC,GAAG,CAACY,MAAJ,CAAW,GAAX,EACPC,IADO,CACF,OADE,CACO,QADP,EAEPyB,IAFO,CAEF/C,EAAE,CAACkD,QAAH,CAAYL,MAAZ,CAFE,CAAZ,CAKA,GAAIM,CAAAA,IAAI,CAAGnD,EAAE,CAACmD,IAAH,GACNC,CADM,CACJ,SAAUR,CAAV,CAAa,CAAE,MAAOJ,CAAAA,MAAM,CAACI,CAAC,CAAChB,IAAF,CAAOG,EAAR,CAAb,CAA2B,CADtC,EAENsB,EAFM,CAEH,SAAUT,CAAV,CAAa,CAAE,MAAOC,CAAAA,MAAM,CAACD,CAAC,CAAC,CAAD,CAAF,CAAb,CAAsB,CAFlC,EAGNU,EAHM,CAGH,SAAUV,CAAV,CAAa,CAAE,MAAOC,CAAAA,MAAM,CAACD,CAAC,CAAC,CAAD,CAAF,CAAb,CAAsB,CAHlC,EAINW,KAJM,CAIAvD,EAAE,CAACwD,cAJH,CAAX,CAI8B;AAE9B;AACA;AACA;AAEA;AACA,GAAIC,CAAAA,IAAI,CAAGhD,GAAG,CAACY,MAAJ,CAAW,MAAX,EAAmBA,MAAnB,CAA0B,cAA1B,EACNC,IADM,CACD,IADC,CACK,MADL,EAEND,MAFM,CAEC,UAFD,EAGNC,IAHM,CAGD,OAHC,CAGQZ,KAHR,EAINY,IAJM,CAID,QAJC,CAISX,MAJT,EAKNW,IALM,CAKD,GALC,CAKI,CALJ,EAMNA,IANM,CAMD,GANC,CAMI,CANJ,CAAX,CAQA;AACA;AACA;AACA;AAEA;AACA,GAAIoC,CAAAA,SAAS,CAAGjD,GAAG,CAACY,MAAJ,CAAW,GAAX,EACXC,IADW,CACN,WADM,CACO,YADP,CAAhB,CAGA;AACAoC,SAAS,CACJjC,SADL,CACe,UADf,EAEKG,IAFL,CAEUQ,WAFV,EAGKuB,KAHL,GAIKtC,MAJL,CAIY,MAJZ,EAKKC,IALL,CAKU,OALV,CAKmB,SAAUsB,CAAV,CAAa,CAAE,MAAO,UAAYA,CAAC,CAACgB,GAArB,CAA0B,CAL5D,EAMKC,KANL,CAMW,MANX,CAMmB,SAAUjB,CAAV,CAAa,CAAE,MAAOZ,CAAAA,KAAK,CAACY,CAAC,CAACgB,GAAH,CAAZ,CAAsB,CANxD,EAOKtC,IAPL,CAOU,GAPV,CAOe6B,IAPf,EASA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAIW,CAAAA,MAAM,CAAG7D,GAAG,CAAC8D,WAAJ,GACRC,KADQ,CACFhC,KADE,EAERiC,KAFQ,CAEF,QAFE,EAGRC,MAHQ,CAGD,UAHC,CAAb,CAMAzD,GAAG,CAACY,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,CACmB,QADnB,EAEKA,IAFL,CAEU,WAFV,CAEuB,cAAgBZ,KAAK,CAAG,GAAxB,EAA+B,IAA/B,CAAsC,EAAtC,CAA2C,GAFlE,EAKAD,GAAG,CAACW,MAAJ,CAAW,SAAX,EACK2B,IADL,CACUe,MADV,EAIA,GAAMK,CAAAA,IAAI,CAAG3B,MAAM,CAAChB,KAAP,GAAe,CAAf,EAAoB,CAACgB,MAAM,CAAChB,KAAP,GAAe,CAAf,EAAoBgB,MAAM,CAAChB,KAAP,GAAe,CAAf,CAArB,EAA0C,GAA3E,CACA,GAAM4C,CAAAA,IAAI,CAAGvB,MAAM,CAACrB,KAAP,GAAe,CAAf,EAAoB,CAACqB,MAAM,CAACrB,KAAP,GAAe,CAAf,EAAoBqB,MAAM,CAACrB,KAAP,GAAe,CAAf,CAArB,EAA0C,GAA3E,CACA,GAAM6C,CAAAA,MAAM,CAAG5D,GAAG,CAACY,MAAJ,CAAW,MAAX,EACVC,IADU,CACL,OADK,CACI,YADJ,EAEVgD,IAFU,CAEL,KAFK,CAAf,CAGAD,MAAM,CAAC/C,IAAP,CAAY,aAAZ,CAA2B,QAA3B,EACA+C,MAAM,CAAC/C,IAAP,CAAY,GAAZ,CAAiB6C,IAAjB,EACAE,MAAM,CAAC/C,IAAP,CAAY,GAAZ,CAAiBX,MAAM,CAAG,EAA1B,EACA,GAAM4D,CAAAA,MAAM,CAAG9D,GAAG,CAACY,MAAJ,CAAW,MAAX,EACVC,IADU,CACL,OADK,CACI,YADJ,EAEVgD,IAFU,CAEL,cAFK,CAAf,CAGAC,MAAM,CAACjD,IAAP,CAAY,GAAZ,CAAiB,CAAC,GAAlB,EACAiD,MAAM,CAACjD,IAAP,CAAY,GAAZ,CAAiB,CAAC,EAAlB,EACAiD,MAAM,CAACjD,IAAP,CAAY,IAAZ,CAAkB,QAAlB,EACAiD,MAAM,CAACjD,IAAP,CAAY,aAAZ,CAA2B,QAA3B,EACAiD,MAAM,CAACjD,IAAP,CAAY,WAAZ,CAAyB,aAAzB,EAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEH,C,uCAIQ,CACL,mBACI,2BAAK,GAAG,CAAE,KAAKkD,KAAf,EADJ,CAGH,C,uBA1RmBzE,KAAK,CAAC0E,S,EA8R9B,cAAetE,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend'\n\nlet svg_count = 0;\n\nclass AreaChart extends React.Component {\n    constructor(props) {\n        super(props)\n        this.removeExistingBars = this.removeExistingBars.bind(this);\n        this.createBarChart = this.createBarChart.bind(this)\n        this.state = {\n            svg: null,\n            width: 0,\n            height: 0\n        };\n\n    }\n    componentDidMount() {\n        const owidth = this.props.size[0]\n        const oheight = this.props.size[1]\n\n        var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n            width = owidth - margin.left - margin.right,\n            height = oheight - margin.top - margin.bottom;\n\n        const svg = d3.select(\"body\").select(\"#lc\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        this.setState({ svg, width, height });\n    }\n    componentDidUpdate() {\n        this.removeExistingBars();\n        this.createBarChart();\n    }\n\n    midpoint(range) {\n        return range[0] + (range[1] - range[0]) / 2.0;\n    }\n\n    removeExistingBars() {\n        const { svg } = this.state;\n\n        svg.selectAll(\"*\").remove();\n\n    }\n\n    createBarChart() {\n        const { svg } = this.state;\n        const { width } = this.state;\n        const { height } = this.state;\n\n        const output = this.props.data\n\n\n        let data = output.filter(function (e) {\n            return e.id < 299;\n        });\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var keys = [\"CHEST PAIN\", \"PNEUMONIA\", \"SEPSIS\", \"TRAUMA\"]\n\n        var stackedData = d3.stack()\n            .keys(keys)\n            (data)\n\n        console.log(\"originalData\", data)\n        console.log(\"pancake\", stackedData)\n\n\n        // let series = d3.stack().keys(keys)(data)\n        // console.log(\"series\",series)\n\n        // var xScale = d3.scaleLinear()\n        //     .range([0, width]); // output\n\n        // // 6. Y scale will use the randomly generate number \n        // var yScale = d3.scaleLinear()\n        //     // .domain([0, 1]) // input \n        //     .range([height, 0]); // output \n\n        var xScale = d3.scaleLinear()\n            .domain(d3.extent(data, function (d) { return d.id; }))\n            .range([0, width]);\n\n\n\n        // Add Y axis\n        var yScale = d3.scaleLinear()\n            .domain([0, 250])\n            .range([height, 0]);\n        //  xScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.distribution; }); })]);\n        // yScale.domain([0, d3.max(data, function (key) { return d3.max(key.values, function (d) { return d.value; }); })]);\n\n\n        let xAxis = svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(xScale));\n\n        let yAxis = svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(d3.axisLeft(yScale));\n\n\n        let area = d3.area()\n            .x(function (d) { return xScale(d.data.id); })\n            .y0(function (d) { return yScale(d[0]); })\n            .y1(function (d) { return yScale(d[1]); })\n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        //////////\n        // BRUSHING AND CHART //\n        //////////\n\n        // Add a clipPath: everything out of this area won't be drawn.\n        var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"svg:rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"x\", 0)\n            .attr(\"y\", 0);\n\n        // Add brushing\n        // var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n        //     .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        //     .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n\n        // Create the scatter variable: where both the circles and the brush take place\n        var areaChart = svg.append('g')\n            .attr(\"clip-path\", \"url(#clip)\")\n\n        // Show the areas\n        areaChart\n            .selectAll(\"mylayers\")\n            .data(stackedData)\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", function (d) { return \"myArea \" + d.key })\n            .style(\"fill\", function (d) { return color(d.key); })\n            .attr(\"d\", area)\n\n        // Add the brushing\n        // areaChart\n        //     .append(\"g\")\n        //     .attr(\"class\", \"brush\")\n        //     .call(brush);\n\n        // var idleTimeout\n        // function idled() { idleTimeout = null; }\n\n        // // A function that update the chart for given boundaries\n        // function updateChart(d, event) {\n\n        //     let extent = event.selection\n\n        //     // If no selection, back to initial coordinate. Otherwise, update X axis domain\n        //     if (!extent) {\n        //         if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        //         xScale.domain(d3.extent(data, function (d) { return d.year; }))\n        //     } else {\n        //         xScale.domain([xScale.invert(extent[0]), xScale.invert(extent[1])])\n        //         areaChart.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n        //     }\n\n        //     // Update axis and area position\n        //     xAxis.transition().duration(1000).call(d3.axisBottom(xScale).ticks(5))\n        //     areaChart\n        //         .selectAll(\"path\")\n        //         .transition().duration(1000)\n        //         .attr(\"d\", area)\n        // }\n\n\n\n        //////////\n        // HIGHLIGHT GROUP //\n        //////////\n\n        // What to do when one group is hovered\n        // var highlight = function (d) {\n        //     console.log(d)\n        //     // reduce opacity of all groups\n        //     d3.selectAll(\".myArea\").style(\"opacity\", .1)\n        //     // expect the one that is hovered\n        //     d3.select(\".\" + d).style(\"opacity\", 1)\n        // }\n\n        // // And when it is not hovered anymore\n        // var noHighlight = function (d) {\n        //     d3.selectAll(\".myArea\").style(\"opacity\", 1)\n        // }\n\n\n\n        // //////////\n        // // LEGEND //\n        // //////////\n\n        // // Add one dot in the legend for each name.\n        // var size = 20\n        // svg.selectAll(\"myrect\")\n        //     .data(keys)\n        //     .enter()\n        //     .append(\"rect\")\n        //     .attr(\"x\", 400)\n        //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) }) // 100 is where the first dot appears. 25 is the distance between dots\n        //     .attr(\"width\", size)\n        //     .attr(\"height\", size)\n        //     .style(\"fill\", function (d) { return color(d) })\n        //     .on(\"mouseover\", highlight)\n        //     .on(\"mouseleave\", noHighlight)\n\n        // // Add one dot in the legend for each name.\n        // svg.selectAll(\"mylabels\")\n        //     .data(keys)\n        //     .enter()\n        //     .append(\"text\")\n        //     .attr(\"x\", 400 + size * 1.2)\n        //     .attr(\"y\", function (d, i) { return 10 + i * (size + 5) + (size / 2) }) // 100 is where the first dot appears. 25 is the distance between dots\n        //     .style(\"fill\", function (d) { return color(d) })\n        //     .text(function (d) { return d })\n        //     .attr(\"text-anchor\", \"left\")\n        //     .style(\"alignment-baseline\", \"middle\")\n        //     .on(\"mouseover\", highlight)\n        //     .on(\"mouseleave\", noHighlight)\n\n        var legend = d3l.legendColor()\n            .scale(color)\n            .shape('circle')\n            .orient('vertical')\n\n\n        svg.append(\"g\")\n            .attr(\"class\", \"legend\")\n            .attr(\"transform\", \"translate(\" + (width - 350) + \", \" + 20 + \")\");\n\n\n        svg.select(\".legend\")\n            .call(legend);\n\n\n        const xmid = xScale.range()[0] + (xScale.range()[1] - xScale.range()[0]) / 2.0;\n        const ymid = yScale.range()[0] + (yScale.range()[1] - yScale.range()[0]) / 2.0;\n        const xtitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text(\"Age\");\n        xtitle.attr('text-anchor', 'middle');\n        xtitle.attr('x', xmid);\n        xtitle.attr('y', height + 40);\n        const ytitle = svg.append('text')\n            .attr('class', 'axis-title')\n            .text('Distribution')\n        ytitle.attr('x', -240);\n        ytitle.attr('y', -80);\n        ytitle.attr('dy', '1.75ex');\n        ytitle.attr('text-anchor', 'middle');\n        ytitle.attr('transform', 'rotate(-90)');\n\n        // const tooltip = d3\n        //     .select('#container')\n        //     .append('div')\n        //     .attr('class', 'tooltip')\n        //     .style('opacity', 0);\n\n        // function mouseover() {\n        //     d3.select(this).attr(\"opacity\", .5)\n\n        // }\n\n        // function mouseout() {\n        //     d3.select(this).attr(\"opacity\", 1);\n        // }\n\n    }\n\n\n\n    render() {\n        return (\n            <div ref={this.myRef} />\n        )\n    }\n\n}\n\nexport default AreaChart;\n"]},"metadata":{},"sourceType":"module"}