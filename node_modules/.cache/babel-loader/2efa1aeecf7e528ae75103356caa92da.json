{"ast":null,"code":"var _jsxFileName = \"/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/WaffleChart.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend';\n\nclass WaffleChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.removeExistingBars = this.removeExistingBars.bind(this);\n    this.createBarChart = this.createBarChart.bind(this);\n    this.state = {\n      svg: null,\n      width: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    const owidth = this.props.size[0];\n    const height = this.props.size[1]; // var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n    //     width = owidth - margin.left - margin.right,\n    //     height = oheight - margin.top - margin.bottom;\n\n    const svg = d3.select(\"body\").select(\"#wc\").select(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    this.setState({\n      svg,\n      width,\n      height\n    });\n  }\n\n  componentDidUpdate() {\n    this.removeExistingBars();\n    this.createBarChart();\n  }\n\n  midpoint(range) {\n    return range[0] + (range[1] - range[0]) / 2.0;\n  }\n\n  removeExistingBars() {\n    const {\n      svg\n    } = this.state;\n    svg.selectAll(\"*\").remove();\n  }\n\n  createBarChart() {\n    const {\n      svg\n    } = this.state;\n    let {\n      width\n    } = this.state;\n    let {\n      height\n    } = this.state;\n    const data = this.props.data;\n    console.log(\"the incoming data\", data);\n    var total = 0;\n    var widthSquares = 20,\n        heightSquares = 5,\n        squareSize = 25,\n        squareValue = 0,\n        gap = 1,\n        theData = [];\n    var color = d3.scaleOrdinal(d3.schemeCategory10); //total\n\n    total = d3.sum(data, function (d) {\n      return d.total;\n    }); //value of a square\n\n    squareValue = total / (widthSquares * heightSquares); //remap data\n\n    data.forEach(function (d, i) {\n      console.log(\"dataeach\", d);\n      console.log(\"index\", i);\n      d.total = +d.total;\n      d.units = Math.floor(d.total / squareValue) < 1 ? 1 : Math.floor(d.total / squareValue);\n      theData = theData.concat(Array(d.units + 1).join(1).split('').map(function () {\n        return {\n          squareValue: squareValue,\n          units: d.units,\n          total: d.total,\n          groupIndex: i\n        };\n      }));\n    });\n    width = squareSize * widthSquares + widthSquares * gap + 25;\n    height = squareSize * heightSquares + heightSquares * gap + 25;\n    console.log(\"end\");\n    console.log(theData);\n    svg.append(\"g\").attr(\"width\", width).attr(\"height\", height).append(\"g\").selectAll(\"div\").data(theData).enter().append(\"rect\").attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"fill\", function (d) {\n      {\n        console.log(d);\n      }\n      return color(data[d.groupIndex].diagnosis);\n    }).attr(\"x\", function (d, i) {\n      //group n squares for column\n      let col = Math.floor(i / heightSquares);\n      return col * squareSize + col * gap;\n    }).attr(\"y\", function (d, i) {\n      let row = i % heightSquares;\n      return heightSquares * squareSize - (row * squareSize + row * gap);\n    }).append(\"title\").text(function (d, i) {\n      return \"diagnosis range: \" + data[d.groupIndex].diagnosis + \" | \" + d.total + \" , \" + d.units + \"%\";\n    });\n    var legend = d3l.legendColor().scale(color).shape('circle').orient('vertical').labelOffset(5);\n    svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", \"translate(\" + (width - 10) + \", \" + 10 + \")\").style(\"font-size\", \"12\");\n    svg.select(\".legend\").call(legend);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default WaffleChart;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/WaffleChart.js"],"names":["React","d3","d3l","WaffleChart","Component","constructor","props","removeExistingBars","bind","createBarChart","state","svg","width","height","componentDidMount","owidth","size","select","attr","margin","left","right","top","bottom","append","setState","componentDidUpdate","midpoint","range","selectAll","remove","data","console","log","total","widthSquares","heightSquares","squareSize","squareValue","gap","theData","color","scaleOrdinal","schemeCategory10","sum","d","forEach","i","units","Math","floor","concat","Array","join","split","map","groupIndex","enter","diagnosis","col","row","text","legend","legendColor","scale","shape","orient","labelOffset","style","call","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,eAArB;;AAEA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,IADI;AAETC,MAAAA,KAAK,EAAE,CAFE;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAb;AAMH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAG,KAAKT,KAAL,CAAWU,IAAX,CAAgB,CAAhB,CAAf;AACA,UAAMH,MAAM,GAAG,KAAKP,KAAL,CAAWU,IAAX,CAAgB,CAAhB,CAAf,CAFgB,CAIhB;AACA;AACA;;AAEA,UAAML,GAAG,GAAGV,EAAE,CAACgB,MAAH,CAAU,MAAV,EAAkBA,MAAlB,CAAyB,KAAzB,EAAgCA,MAAhC,CAAuC,KAAvC,EACPC,IADO,CACF,OADE,EACON,KAAK,GAAGO,MAAM,CAACC,IAAf,GAAsBD,MAAM,CAACE,KADpC,EAEPH,IAFO,CAEF,QAFE,EAEQL,MAAM,GAAGM,MAAM,CAACG,GAAhB,GAAsBH,MAAM,CAACI,MAFrC,EAGPC,MAHO,CAGA,GAHA,EAIPN,IAJO,CAIF,WAJE,EAIW,eAAeC,MAAM,CAACC,IAAtB,GAA6B,GAA7B,GAAmCD,MAAM,CAACG,GAA1C,GAAgD,GAJ3D,CAAZ;AAOA,SAAKG,QAAL,CAAc;AAAEd,MAAAA,GAAF;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAd;AACH;;AACDa,EAAAA,kBAAkB,GAAG;AACjB,SAAKnB,kBAAL;AACA,SAAKE,cAAL;AACH;;AAEDkB,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,WAAOA,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAjB,IAAwB,GAA1C;AACH;;AAEDrB,EAAAA,kBAAkB,GAAG;AACjB,UAAM;AAAEI,MAAAA;AAAF,QAAU,KAAKD,KAArB;AAEAC,IAAAA,GAAG,CAACkB,SAAJ,CAAc,GAAd,EAAmBC,MAAnB;AAEH;;AAEDrB,EAAAA,cAAc,GAAG;AACb,UAAM;AAAEE,MAAAA;AAAF,QAAU,KAAKD,KAArB;AACA,QAAI;AAAEE,MAAAA;AAAF,QAAY,KAAKF,KAArB;AACA,QAAI;AAAEG,MAAAA;AAAF,QAAa,KAAKH,KAAtB;AAEA,UAAMqB,IAAI,GAAG,KAAKzB,KAAL,CAAWyB,IAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,IAAjC;AACA,QAAIG,KAAK,GAAG,CAAZ;AACA,QACIC,YAAY,GAAG,EADnB;AAAA,QAEIC,aAAa,GAAG,CAFpB;AAAA,QAGIC,UAAU,GAAG,EAHjB;AAAA,QAIIC,WAAW,GAAG,CAJlB;AAAA,QAKIC,GAAG,GAAG,CALV;AAAA,QAMIC,OAAO,GAAG,EANd;AAQA,QAAIC,KAAK,GAAGxC,EAAE,CAACyC,YAAH,CAAgBzC,EAAE,CAAC0C,gBAAnB,CAAZ,CAhBa,CAkBb;;AACAT,IAAAA,KAAK,GAAGjC,EAAE,CAAC2C,GAAH,CAAOb,IAAP,EAAa,UAAUc,CAAV,EAAa;AAAE,aAAOA,CAAC,CAACX,KAAT;AAAiB,KAA7C,CAAR,CAnBa,CAqBb;;AACAI,IAAAA,WAAW,GAAGJ,KAAK,IAAIC,YAAY,GAAGC,aAAnB,CAAnB,CAtBa,CAwBb;;AACAL,IAAAA,IAAI,CAACe,OAAL,CAAa,UAAUD,CAAV,EAAaE,CAAb,EAAgB;AAEzBf,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBY,CAAxB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBc,CAArB;AACAF,MAAAA,CAAC,CAACX,KAAF,GAAU,CAACW,CAAC,CAACX,KAAb;AACAW,MAAAA,CAAC,CAACG,KAAF,GAAWC,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACX,KAAF,GAAUI,WAArB,CAAD,GAAsC,CAAtC,GAA0C,CAA1C,GAA+CW,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACX,KAAF,GAAUI,WAArB,CAAzD;AACAE,MAAAA,OAAO,GAAGA,OAAO,CAACW,MAAR,CACNC,KAAK,CAACP,CAAC,CAACG,KAAF,GAAU,CAAX,CAAL,CAAmBK,IAAnB,CAAwB,CAAxB,EAA2BC,KAA3B,CAAiC,EAAjC,EAAqCC,GAArC,CAAyC,YAAY;AACjD,eAAO;AAEHjB,UAAAA,WAAW,EAAEA,WAFV;AAGHU,UAAAA,KAAK,EAAEH,CAAC,CAACG,KAHN;AAIHd,UAAAA,KAAK,EAAEW,CAAC,CAACX,KAJN;AAKHsB,UAAAA,UAAU,EAAET;AALT,SAAP;AAQH,OATD,CADM,CAAV;AAYH,KAlBD;AAoBAnC,IAAAA,KAAK,GAAIyB,UAAU,GAAGF,YAAd,GAA8BA,YAAY,GAAGI,GAA7C,GAAmD,EAA3D;AACA1B,IAAAA,MAAM,GAAIwB,UAAU,GAAGD,aAAd,GAA+BA,aAAa,GAAGG,GAA/C,GAAqD,EAA9D;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;AACA7B,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EACKN,IADL,CACU,OADV,EACmBN,KADnB,EAEKM,IAFL,CAEU,QAFV,EAEoBL,MAFpB,EAGKW,MAHL,CAGY,GAHZ,EAIKK,SAJL,CAIe,KAJf,EAKKE,IALL,CAKUS,OALV,EAMKiB,KANL,GAOKjC,MAPL,CAOY,MAPZ,EAQKN,IARL,CAQU,OARV,EAQmBmB,UARnB,EASKnB,IATL,CASU,QATV,EASoBmB,UATpB,EAUKnB,IAVL,CAUU,MAVV,EAUkB,UAAU2B,CAAV,EAAa;AACvB;AAAEb,QAAAA,OAAO,CAACC,GAAR,CAAYY,CAAZ;AAAgB;AAClB,aAAOJ,KAAK,CAACV,IAAI,CAACc,CAAC,CAACW,UAAH,CAAJ,CAAmBE,SAApB,CAAZ;AACH,KAbL,EAcKxC,IAdL,CAcU,GAdV,EAce,UAAU2B,CAAV,EAAaE,CAAb,EAAgB;AACvB;AACA,UAAIY,GAAG,GAAGV,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGX,aAAf,CAAV;AACA,aAAQuB,GAAG,GAAGtB,UAAP,GAAsBsB,GAAG,GAAGpB,GAAnC;AACH,KAlBL,EAmBKrB,IAnBL,CAmBU,GAnBV,EAmBe,UAAU2B,CAAV,EAAaE,CAAb,EAAgB;AACvB,UAAIa,GAAG,GAAGb,CAAC,GAAGX,aAAd;AACA,aAAQA,aAAa,GAAGC,UAAjB,IAAiCuB,GAAG,GAAGvB,UAAP,GAAsBuB,GAAG,GAAGrB,GAA5D,CAAP;AACH,KAtBL,EAuBKf,MAvBL,CAuBY,OAvBZ,EAwBKqC,IAxBL,CAwBU,UAAUhB,CAAV,EAAaE,CAAb,EAAgB;AAClB,aAAO,sBAAsBhB,IAAI,CAACc,CAAC,CAACW,UAAH,CAAJ,CAAmBE,SAAzC,GAAqD,KAArD,GAA6Db,CAAC,CAACX,KAA/D,GAAuE,KAAvE,GAA+EW,CAAC,CAACG,KAAjF,GAAyF,GAAhG;AACH,KA1BL;AA4BA,QAAIc,MAAM,GAAG5D,GAAG,CAAC6D,WAAJ,GACRC,KADQ,CACFvB,KADE,EAERwB,KAFQ,CAEF,QAFE,EAGRC,MAHQ,CAGD,UAHC,EAIRC,WAJQ,CAII,CAJJ,CAAb;AAOAxD,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EACKN,IADL,CACU,OADV,EACmB,QADnB,EAEKA,IAFL,CAEU,WAFV,EAEuB,gBAAgBN,KAAK,GAAG,EAAxB,IAA8B,IAA9B,GAAqC,EAArC,GAA0C,GAFjE,EAGKwD,KAHL,CAGW,WAHX,EAGwB,IAHxB;AAKAzD,IAAAA,GAAG,CAACM,MAAJ,CAAW,SAAX,EACKoD,IADL,CACUP,MADV;AAGH;;AAIDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAjJqC;;AAqJ1C,eAAenE,WAAf","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport * as d3l from 'd3-svg-legend'\n\nclass WaffleChart extends React.Component {\n    constructor(props) {\n        super(props)\n        this.removeExistingBars = this.removeExistingBars.bind(this);\n        this.createBarChart = this.createBarChart.bind(this)\n        this.state = {\n            svg: null,\n            width: 0,\n            height: 0\n        };\n\n    }\n    componentDidMount() {\n        const owidth = this.props.size[0]\n        const height = this.props.size[1]\n\n        // var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n        //     width = owidth - margin.left - margin.right,\n        //     height = oheight - margin.top - margin.bottom;\n\n        const svg = d3.select(\"body\").select(\"#wc\").select(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        this.setState({ svg, width, height });\n    }\n    componentDidUpdate() {\n        this.removeExistingBars();\n        this.createBarChart();\n    }\n\n    midpoint(range) {\n        return range[0] + (range[1] - range[0]) / 2.0;\n    }\n\n    removeExistingBars() {\n        const { svg } = this.state;\n\n        svg.selectAll(\"*\").remove();\n\n    }\n\n    createBarChart() {\n        const { svg } = this.state;\n        let { width } = this.state;\n        let { height } = this.state;\n\n        const data = this.props.data\n        console.log(\"the incoming data\", data)\n        var total = 0;\n        var\n            widthSquares = 20,\n            heightSquares = 5,\n            squareSize = 25,\n            squareValue = 0,\n            gap = 1,\n            theData = [];\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n        //total\n        total = d3.sum(data, function (d) { return d.total; });\n\n        //value of a square\n        squareValue = total / (widthSquares * heightSquares);\n\n        //remap data\n        data.forEach(function (d, i) {\n\n            console.log(\"dataeach\", d)\n            console.log(\"index\", i)\n            d.total = +d.total;\n            d.units = (Math.floor(d.total / squareValue)) < 1 ? 1 : (Math.floor(d.total / squareValue));\n            theData = theData.concat(\n                Array(d.units + 1).join(1).split('').map(function () {\n                    return {\n\n                        squareValue: squareValue,\n                        units: d.units,\n                        total: d.total,\n                        groupIndex: i\n\n                    };\n                })\n            );\n        });\n\n        width = (squareSize * widthSquares) + widthSquares * gap + 25;\n        height = (squareSize * heightSquares) + heightSquares * gap + 25;\n        console.log(\"end\")\n        console.log(theData)\n        svg.append(\"g\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .selectAll(\"div\")\n            .data(theData)\n            .enter()\n            .append(\"rect\")\n            .attr(\"width\", squareSize)\n            .attr(\"height\", squareSize)\n            .attr(\"fill\", function (d) {\n                { console.log(d) }\n                return color(data[d.groupIndex].diagnosis);\n            })\n            .attr(\"x\", function (d, i) {\n                //group n squares for column\n                let col = Math.floor(i / heightSquares);\n                return (col * squareSize) + (col * gap);\n            })\n            .attr(\"y\", function (d, i) {\n                let row = i % heightSquares;\n                return (heightSquares * squareSize) - ((row * squareSize) + (row * gap))\n            })\n            .append(\"title\")\n            .text(function (d, i) {\n                return \"diagnosis range: \" + data[d.groupIndex].diagnosis + \" | \" + d.total + \" , \" + d.units + \"%\"\n            });\n\n        var legend = d3l.legendColor()\n            .scale(color)\n            .shape('circle')\n            .orient('vertical')\n            .labelOffset(5)\n\n\n        svg.append(\"g\")\n            .attr(\"class\", \"legend\")\n            .attr(\"transform\", \"translate(\" + (width - 10) + \", \" + 10 + \")\")\n            .style(\"font-size\", \"12\")\n\n        svg.select(\".legend\")\n            .call(legend);\n        \n    }\n\n\n\n    render() {\n        return (\n            <svg />\n        )\n    }\n\n}\n\nexport default WaffleChart;\n"]},"metadata":{},"sourceType":"module"}