{"ast":null,"code":"var _jsxFileName = \"/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/DiagnosesParallelCoordinates.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport ScatterPlot from './ScatterPlot';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, useTheme, makeStyles, colors } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction pcv1data(dataset) {\n  console.log(\"data\", dataset.map(function (d) {\n    return d.diagnosis;\n  }));\n  console.log(\"dataset\", dataset);\n  let arr = [];\n\n  for (var i = 0; i < dataset.length; i++) {\n    let m = {};\n    let f = {};\n    m.disease = dataset[i].diagnosis;\n    f.disease = dataset[i].diagnosis;\n\n    for (var j = 0; j < dataset[i].values.length; j++) {\n      let dist = dataset[i].values[j].distribution;\n      let raw = dist.split(\"(\")[1];\n      let bare = dist.split(\"(\")[0];\n      let key = bare.trim();\n      let gender = raw.split(\")\")[0];\n      let value = dataset[i].values[j].value;\n\n      if (gender == \"M\") {\n        m[key] = value;\n        m.type = \"Male\";\n      } else if (gender == \"F\") {\n        f[key] = value;\n        f.type = \"Female\";\n      }\n    }\n\n    arr.push(m);\n    arr.push(f);\n  }\n\n  return arr;\n}\n\nfunction pcv2data(dataset) {\n  console.log(\"data\", dataset.map(function (d) {\n    return d.diagnosis;\n  }));\n  console.log(\"dataset\", dataset);\n  let arr = [];\n\n  for (var i = 0; i < dataset.length; i++) {\n    let m = {};\n    let f = {};\n    m.disease = dataset[i].diagnosis;\n    f.disease = dataset[i].diagnosis;\n\n    for (var j = 0; j < dataset[i].values.length; j++) {\n      let dist = dataset[i].values[j].distribution;\n      let raw = dist.split(\"(\")[1];\n      let bare = dist.split(\"(\")[0];\n      let key = bare.trim();\n      let gender = raw.split(\")\")[0];\n      let value = dataset[i].values[j].value;\n\n      if (gender == \"English\") {\n        m[key] = value;\n        m.type = \"English\";\n      } else if (gender == \"Non-English\") {\n        f[key] = value;\n        f.type = \"Non-English\";\n      }\n    }\n\n    arr.push(m);\n    arr.push(f);\n  }\n\n  return arr;\n}\n\nconst DiagnosesScatterPlot = ({\n  className,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  let [loading, setLoading] = React.useState(true);\n  let [data, setData] = React.useState([]);\n  const [check, setCheck] = React.useState({\n    a: true,\n    b: true,\n    c: true,\n    d: true\n  });\n  console.log(selector);\n  React.useEffect(() => {\n    let apiUrl = 'https://visualizing-healthcare-data.wm.r.appspot.com/data/insurance/gender';\n    let apiUrl2 = 'https://visualizing-healthcare-data.wm.r.appspot.com/data/insurance/language';\n    fetch(apiUrl).then(response => response.json()).then(result => pcv1data(result)).then(result => {\n      setData(result);\n    });\n    fetch(apiUrl2).then(response => response.json()).then(result => pcv1data(result)).then(result => {\n      setData(this.state.data.concat(result));\n      setLoading(false);\n    });\n  }, []);\n  console.log(data);\n\n  const handleChange = event => {\n    setSelector(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: state.checkedA,\n        onChange: handleChange,\n        name: \"checkedA\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 34\n        }\n      }),\n      label: \"Secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }),\n    title: \"Scatter Plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    id: \"sp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, !loading ? /*#__PURE__*/React.createElement(ScatterPlot, {\n    data: data,\n    selector: selector,\n    size: [800, 800],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 97\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }));\n};\n\nDiagnosesParallelCoordinates.propTypes = {\n  className: PropTypes.string\n};\nexport default DiagnosesParallelCoordinates;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/DiagnosesParallelCoordinates.js"],"names":["React","clsx","PropTypes","ScatterPlot","Box","Button","Card","CardContent","CardHeader","Divider","useTheme","makeStyles","colors","ArrowDropDownIcon","ArrowRightIcon","CircularProgress","Select","MenuItem","useStyles","root","pcv1data","dataset","console","log","map","d","diagnosis","arr","i","length","m","f","disease","j","values","dist","distribution","raw","split","bare","key","trim","gender","value","type","push","pcv2data","DiagnosesScatterPlot","className","rest","classes","theme","loading","setLoading","useState","data","setData","check","setCheck","a","b","c","selector","useEffect","apiUrl","apiUrl2","fetch","then","response","json","result","state","concat","handleChange","event","setSelector","target","checkedA","DiagnosesParallelCoordinates","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport ScatterPlot from './ScatterPlot';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    useTheme,\n    makeStyles,\n    colors\n} from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nfunction pcv1data(dataset) {\n    console.log(\"data\", dataset.map(function (d) { return d.diagnosis; }))\n    console.log(\"dataset\", dataset)\n\n    let arr = []\n    for (var i = 0; i < dataset.length; i++) {\n        let m = {}\n        let f = {}\n        m.disease = dataset[i].diagnosis\n        f.disease = dataset[i].diagnosis\n\n        for (var j = 0; j < dataset[i].values.length; j++) {\n            let dist = dataset[i].values[j].distribution\n            let raw = dist.split(\"(\")[1]\n            let bare = dist.split(\"(\")[0]\n            let key = bare.trim()\n            let gender = raw.split(\")\")[0]\n            let value = dataset[i].values[j].value\n\n            if (gender == \"M\") {\n                m[key] = value\n                m.type = \"Male\"\n            }\n            else if (gender == \"F\") {\n                f[key] = value\n                f.type = \"Female\"\n            }\n\n        }\n        arr.push(m)\n        arr.push(f)\n    }\n    return arr\n\n}\n\n\nfunction pcv2data(dataset) {\n    console.log(\"data\", dataset.map(function (d) { return d.diagnosis; }))\n    console.log(\"dataset\", dataset)\n\n    let arr = []\n    for (var i = 0; i < dataset.length; i++) {\n        let m = {}\n        let f = {}\n        m.disease = dataset[i].diagnosis\n        f.disease = dataset[i].diagnosis\n\n        for (var j = 0; j < dataset[i].values.length; j++) {\n            let dist = dataset[i].values[j].distribution\n            let raw = dist.split(\"(\")[1]\n            let bare = dist.split(\"(\")[0]\n            let key = bare.trim()\n            let gender = raw.split(\")\")[0]\n            let value = dataset[i].values[j].value\n\n            if (gender == \"English\") {\n                m[key] = value\n                m.type = \"English\"\n            }\n            else if (gender == \"Non-English\") {\n                f[key] = value\n                f.type = \"Non-English\"\n            }\n\n        }\n        arr.push(m)\n        arr.push(f)\n    }\n    return arr\n\n}\n\nconst DiagnosesScatterPlot = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    let [loading, setLoading] = React.useState(true);\n    let [data, setData] = React.useState([]);\n    const [check, setCheck] = React.useState({\n        a: true,\n        b: true,\n        c: true,\n        d: true,\n    });\n\n    console.log(selector)\n    React.useEffect(() => {\n        let apiUrl = 'https://visualizing-healthcare-data.wm.r.appspot.com/data/insurance/gender';\n        let apiUrl2 = 'https://visualizing-healthcare-data.wm.r.appspot.com/data/insurance/language';\n        fetch(apiUrl)\n            .then((response) => response.json())\n            .then(result => pcv1data(result))\n            .then(result => {\n                setData(result);\n            })\n        fetch(apiUrl2)\n            .then((response) => response.json())\n            .then(result => pcv1data(result))\n            .then(result => {\n                setData(this.state.data.concat(result));\n                setLoading(false);\n            })\n    }, [])\n    console.log(data)\n\n    const handleChange = (event) => {\n        setSelector(event.target.value);\n    };\n\n    return (\n        <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <CardHeader\n                action={(\n                    <FormControlLabel\n                        control={<Checkbox checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n                        label=\"Secondary\"\n                    />\n                )}\n                title=\"Scatter Plot\"\n            />\n            <Divider />\n            <CardContent id={\"sp\"}>\n                {/* <Box\n          id={\"gbc\"}\n          height={400}\n          position=\"relative\"\n        > */}\n                {!loading ? <ScatterPlot data={data} selector={selector} size={[800, 800]} /> : <CircularProgress />}\n                {/* </Box> */}\n            </CardContent>\n            <Divider />\n            <Box\n                display=\"flex\"\n                justifyContent=\"flex-end\"\n                p={2}\n            >\n                {/* <Button\n          color=\"primary\"\n          endIcon={<ArrowRightIcon />}\n          size=\"small\"\n          variant=\"text\"\n        >\n          Overview\n        </Button> */}\n            </Box>\n        </Card>\n    );\n};\n\nDiagnosesParallelCoordinates.propTypes = {\n    className: PropTypes.string\n};\n\nexport default DiagnosesParallelCoordinates;\n"]},"metadata":{},"sourceType":"module"}