{"ast":null,"code":"var _jsxFileName = \"/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/TreeMap.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { range } from 'd3';\n\nclass TreeMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.removeMap = this.removeMap.bind(this);\n    this.createMap = this.createMap.bind(this);\n    this.state = {\n      svg: null,\n      div: null,\n      width: null,\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    const owidth = this.props.size[0];\n    const oheight = this.props.size[1];\n    var margin = {\n      top: 20,\n      right: 20,\n      bottom: 70,\n      left: 100\n    },\n        width = owidth - margin.left - margin.right,\n        height = oheight - margin.top - margin.bottom;\n    const svg = d3.select(\"body\").select(\"#tm\").select(\"svg\").attr(\"width\", width).attr(\"height\", height);\n    const div = d3.select(\"body\").select(\"#tm\").append(\"div\").attr(\"class\", \"tooltip-donut\").style(\"opacity\", 0);\n    this.setState({\n      svg\n    });\n    this.setState({\n      width\n    });\n    this.setState({\n      height\n    });\n    this.setState({\n      div\n    });\n  }\n\n  componentDidUpdate() {\n    this.removeMap();\n    this.createMap();\n  }\n\n  removeMap() {\n    const {\n      svg\n    } = this.state;\n    svg.selectAll(\"*\").remove();\n  }\n\n  createMap() {\n    const {\n      svg\n    } = this.state;\n    const {\n      width\n    } = this.state;\n    const {\n      height\n    } = this.state;\n    const {\n      div\n    } = this.state;\n    const rawdata = this.props.data;\n    let dataset = {\n      name: \"q8\",\n      \"children\": []\n    };\n    rawdata.forEach(function (d) {\n      dataset[\"children\"].push({\n        name: d.diagnosis,\n        children: d.values\n      });\n    });\n    let data = dataset;\n    console.log(data);\n    const hierarchy = d3.hierarchy(data).sum(d => d.value) //sum every child's values\n    .sort((a, b) => b.value - a.value); // and sort them in descending order \n\n    const treemap = d3.treemap().size([width, height]) // width: 400px, height:450px\n    .padding(1); // set padding to 1\n\n    const categories = dataset.children.map(d => d.name);\n    const root = treemap(hierarchy);\n    const colors = ['#1C1832', '#9E999D', '#F2259C', '#347EB4', '#08ACB6', '#91BB91', '#BCD32F', '#75EDB8', \"#89EE4B\", '#AD4FE8', '#D5AB61', '#BC3B3A', '#F6A1F9', '#87ABBB', '#412433', '#56B870', '#FDAB41', '#64624F'];\n    const colorScale = d3.scaleOrdinal() // the scale function\n    .domain(categories) // the data\n    .range(colors); // the way the data should be shown\n\n    svg.selectAll(\"rect\").data(root.leaves()).enter().append(\"rect\").attr(\"x\", d => d.x0).attr(\"y\", d => d.y0).attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0).attr(\"fill\", d => colorScale(d.data.value)).attr(\"font-size\", \"15px\");\n    svg.selectAll('text').data(root.leaves()).enter().append('text').selectAll('tspan').data(d => {\n      {\n        console.log(d.parent.data.name);\n      }\n      return d.parent.data.name.split(/(?=[A-Z][^A-Z])/g). // split the name of movie\n      map(v => {\n        {\n          console.log(v);\n        }\n        return {\n          text: v,\n          x0: d.x0,\n          // keep x0 reference\n          y0: d.y0 // keep y0 reference\n\n        };\n      });\n    }).enter().append('tspan').attr(\"x\", d => d.x0 + 5).attr(\"y\", (d, i) => d.y0 + 15 + i * 2) // offset by index \n    .text(d => d.text).attr(\"font-size\", \"0.5em\").attr(\"fill\", \"white\"); //     .on(\"mouseover\", function (d) {\n    //         {console.log(d)}\n    //         tooltip.text(d.path[0].__data__.data.value + \": \" + d.path[0].__data__.data.value);\n    //         tooltip.style(\"visibility\", \"visible\");\n    //     })\n    //     .on(\"mousemove\", function (event, d) {\n    //         return tooltip.style(\"top\", (event.pageY - 10) + \"px\").style(\"left\", (event.pageX + 10) + \"px\");\n    //     })\n    //     .on(\"mouseout\", function () { return tooltip.style(\"visibility\", \"hidden\"); });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default TreeMap;","map":{"version":3,"sources":["/Users/aditya/Dropbox/Senior S1/ST/dashboard/src/views/dashboard/DashboardView/TreeMap.js"],"names":["React","d3","range","TreeMap","Component","constructor","props","removeMap","bind","createMap","state","svg","div","width","height","componentDidMount","owidth","size","oheight","margin","top","right","bottom","left","select","attr","append","style","setState","componentDidUpdate","selectAll","remove","rawdata","data","dataset","name","forEach","d","push","diagnosis","children","values","console","log","hierarchy","sum","value","sort","a","b","treemap","padding","categories","map","root","colors","colorScale","scaleOrdinal","domain","leaves","enter","x0","y0","x1","y1","parent","split","v","text","i","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport { range } from 'd3';\n\nclass TreeMap extends React.Component {\n    constructor(props) {\n        super(props)\n        this.removeMap = this.removeMap.bind(this);\n        this.createMap = this.createMap.bind(this)\n        this.state = {\n            svg: null,\n            div: null,\n            width: null,\n            height: null,\n        };\n\n    }\n    componentDidMount() {\n        const owidth = this.props.size[0]\n        const oheight = this.props.size[1]\n\n        var margin = { top: 20, right: 20, bottom: 70, left: 100 },\n            width = owidth - margin.left - margin.right,\n            height = oheight - margin.top - margin.bottom;\n\n        const svg = d3.select(\"body\").select(\"#tm\").select(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n        const div = d3.select(\"body\").select(\"#tm\").append(\"div\")\n            .attr(\"class\", \"tooltip-donut\")\n            .style(\"opacity\", 0);\n        this.setState({ svg });\n        this.setState({ width });\n        this.setState({ height });\n        this.setState({ div });\n\n\n    }\n    componentDidUpdate() {\n        this.removeMap();\n        this.createMap();\n    }\n\n\n    removeMap() {\n        const { svg } = this.state;\n\n        svg.selectAll(\"*\").remove();\n\n    }\n\n    createMap() {\n        const { svg } = this.state;\n        const { width } = this.state;\n        const { height } = this.state;\n        const { div } = this.state;\n\n        const rawdata = this.props.data\n        let dataset = {\n            name: \"q8\",\n            \"children\": []\n        };\n\n        rawdata.forEach(function (d) {\n            dataset[\"children\"].push({\n                name: d.diagnosis,\n                children: d.values\n            })\n        })\n        let data = dataset\n        console.log(data)\n        const hierarchy = d3.hierarchy(data)\n            .sum(d => d.value)  //sum every child's values\n            .sort((a, b) => b.value - a.value) // and sort them in descending order \n        const treemap = d3.treemap()\n            .size([width, height]) // width: 400px, height:450px\n            .padding(1);      // set padding to 1\n\n        const categories = dataset.children.map(d => d.name);\n\n        const root = treemap(hierarchy);\n        const colors = ['#1C1832', '#9E999D', '#F2259C', '#347EB4',\n            '#08ACB6', '#91BB91', '#BCD32F', '#75EDB8',\n            \"#89EE4B\", '#AD4FE8', '#D5AB61', '#BC3B3A',\n            '#F6A1F9', '#87ABBB', '#412433', '#56B870',\n            '#FDAB41', '#64624F']\n\n        const colorScale = d3.scaleOrdinal() // the scale function\n            .domain(categories) // the data\n            .range(colors)    // the way the data should be shown\n\n        svg.selectAll(\"rect\")\n            .data(root.leaves())\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", d => d.x0)\n            .attr(\"y\", d => d.y0)\n            .attr(\"width\", d => d.x1 - d.x0)\n            .attr(\"height\", d => d.y1 - d.y0)\n            .attr(\"fill\", d => colorScale(d.data.value))\n            .attr(\"font-size\", \"15px\")\n\n\n        svg.selectAll('text')\n            .data(root.leaves())\n            .enter()\n            .append('text')\n            .selectAll('tspan')\n            .data(d => {\n                { console.log(d.parent.data.name)}\n                return (d.parent.data.name.split(/(?=[A-Z][^A-Z])/g))// split the name of movie\n                    .map(v => {\n                        { console.log(v) }\n                        return {\n                            text: v,\n                            x0: d.x0,                        // keep x0 reference\n                            y0: d.y0                         // keep y0 reference\n                        }\n                    });\n            })\n            .enter()\n            .append('tspan')\n            .attr(\"x\", (d) => d.x0 + 5)\n            .attr(\"y\", (d, i) => d.y0 + 15 + (i * 2))       // offset by index \n            .text((d) => d.text)\n            .attr(\"font-size\", \"0.5em\")\n            .attr(\"fill\", \"white\")\n\n        //     .on(\"mouseover\", function (d) {\n        //         {console.log(d)}\n        //         tooltip.text(d.path[0].__data__.data.value + \": \" + d.path[0].__data__.data.value);\n        //         tooltip.style(\"visibility\", \"visible\");\n        //     })\n        //     .on(\"mousemove\", function (event, d) {\n        //         return tooltip.style(\"top\", (event.pageY - 10) + \"px\").style(\"left\", (event.pageX + 10) + \"px\");\n        //     })\n        //     .on(\"mouseout\", function () { return tooltip.style(\"visibility\", \"hidden\"); });\n\n\n    }\n\n\n    render() {\n        return (\n            <svg />\n        )\n    }\n\n}\n\nexport default TreeMap;\n"]},"metadata":{},"sourceType":"module"}